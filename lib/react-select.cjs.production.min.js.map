{"version":3,"file":"react-select.cjs.production.min.js","sources":["../src/utils.ts","../src/components/Menu.tsx","../src/diacritics.ts","../src/internal/A11yText.tsx","../src/accessibility/index.ts","../src/components/LiveRegion.tsx","../src/filters.ts","../src/internal/DummyInput.tsx","../src/internal/useScrollLock.ts","../src/internal/ScrollManager.tsx","../src/internal/useScrollCapture.ts","../src/builtins.ts","../src/components/indicators.tsx","../src/components/Control.tsx","../src/components/Input.tsx","../src/components/MultiValue.tsx","../src/components/index.ts","../src/components/Group.tsx","../src/components/containers.tsx","../src/components/Option.tsx","../src/components/Placeholder.tsx","../src/components/SingleValue.tsx","../src/styles.ts","../src/theme.ts","../src/Select.tsx","../src/stateManager.tsx","../src/useStateManager.ts","../src/NonceProvider.tsx"],"sourcesContent":["import {\n  ClassNamesState,\n  CommonPropsAndClassName,\n  GroupBase,\n  InputActionMeta,\n  MultiValue,\n  OnChangeValue,\n  OptionBase,\n  Options,\n  PropsValue,\n  SingleValue,\n} from './types';\n\n// ==============================\n// NO OP\n// ==============================\n\nexport const noop = () => {};\nexport const emptyString = () => '';\n\n// ==============================\n// Class Name Prefixer\n// ==============================\n\n/**\n String representation of component state for styling with class names.\n\n Expects an array of strings OR a string/object pair:\n - className(['comp', 'comp-arg', 'comp-arg-2'])\n   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'\n - className('comp', { some: true, state: false })\n   @returns 'react-select__comp react-select__comp--some'\n*/\nfunction applyPrefixToName(prefix: string, name: string) {\n  if (!name) {\n    return prefix;\n  } else if (name[0] === '-') {\n    return prefix + name;\n  } else {\n    return prefix + '__' + name;\n  }\n}\n\nexport function classNames(\n  prefix?: string | null,\n  state?: ClassNamesState,\n  className?: string\n) {\n  const arr = [className];\n  if (state && prefix) {\n    for (let key in state) {\n      if (state.hasOwnProperty(key) && state[key]) {\n        arr.push(`${applyPrefixToName(prefix, key)}`);\n      }\n    }\n  }\n\n  return arr\n    .filter((i) => i)\n    .map((i) => String(i).trim())\n    .join(' ');\n}\n// ==============================\n// Clean Value\n// ==============================\n\nexport const cleanValue = <Option extends OptionBase>(\n  value: PropsValue<Option>\n): Options<Option> => {\n  if (isArray(value)) return value.filter(Boolean);\n  if (typeof value === 'object' && value !== null) return [value];\n  return [];\n};\n\n// ==============================\n// Clean Common Props\n// ==============================\n\nexport const cleanCommonProps = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>,\n  AdditionalProps\n>(\n  props: Partial<CommonPropsAndClassName<Option, IsMulti, Group>> &\n    AdditionalProps\n): Omit<\n  AdditionalProps,\n  keyof CommonPropsAndClassName<Option, IsMulti, Group>\n> => {\n  //className\n  const {\n    className, // not listed in commonProps documentation, needs to be removed to allow Emotion to generate classNames\n    clearValue,\n    cx,\n    getStyles,\n    getValue,\n    hasValue,\n    isMulti,\n    isRtl,\n    options, // not listed in commonProps documentation\n    selectOption,\n    selectProps,\n    setValue,\n    theme, // not listed in commonProps documentation\n    ...innerProps\n  } = props;\n  return { ...innerProps };\n};\n\n// ==============================\n// Handle Input Change\n// ==============================\n\nexport function handleInputChange(\n  inputValue: string,\n  actionMeta: InputActionMeta,\n  onInputChange?: (\n    newValue: string,\n    actionMeta: InputActionMeta\n  ) => string | void\n) {\n  if (onInputChange) {\n    const newValue = onInputChange(inputValue, actionMeta);\n    if (typeof newValue === 'string') return newValue;\n  }\n  return inputValue;\n}\n\n// ==============================\n// Scroll Helpers\n// ==============================\n\nexport function isDocumentElement(\n  el: HTMLElement | typeof window\n): el is typeof window {\n  return [document.documentElement, document.body, window].indexOf(el) > -1;\n}\n\n// Normalized Scroll Top\n// ------------------------------\n\nexport function normalizedHeight(el: HTMLElement | typeof window): number {\n  if (isDocumentElement(el)) {\n    return window.innerHeight;\n  }\n\n  return el.clientHeight;\n}\n\n// Normalized scrollTo & scrollTop\n// ------------------------------\n\nexport function getScrollTop(el: HTMLElement | typeof window): number {\n  if (isDocumentElement(el)) {\n    return window.pageYOffset;\n  }\n  return el.scrollTop;\n}\n\nexport function scrollTo(el: HTMLElement | typeof window, top: number): void {\n  // with a scroll distance, we perform scroll on the element\n  if (isDocumentElement(el)) {\n    window.scrollTo(0, top);\n    return;\n  }\n\n  el.scrollTop = top;\n}\n\n// Get Scroll Parent\n// ------------------------------\n\nexport function getScrollParent(element: HTMLElement) {\n  let style = getComputedStyle(element);\n  const excludeStaticParent = style.position === 'absolute';\n  const overflowRx = /(auto|scroll)/;\n\n  if (style.position === 'fixed') return document.documentElement;\n\n  for (\n    let parent: HTMLElement | null = element;\n    (parent = parent.parentElement);\n\n  ) {\n    style = getComputedStyle(parent);\n    if (excludeStaticParent && style.position === 'static') {\n      continue;\n    }\n    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {\n      return parent;\n    }\n  }\n\n  return document.documentElement;\n}\n\n// Animated Scroll To\n// ------------------------------\n\n/**\n  @param t: time (elapsed)\n  @param b: initial value\n  @param c: amount of change\n  @param d: duration\n*/\nfunction easeOutCubic(t: number, b: number, c: number, d: number): number {\n  return c * ((t = t / d - 1) * t * t + 1) + b;\n}\n\nexport function animatedScrollTo(\n  element: HTMLElement | typeof window,\n  to: number,\n  duration = 200,\n  callback: (element: HTMLElement | typeof window) => void = noop\n) {\n  const start = getScrollTop(element);\n  const change = to - start;\n  const increment = 10;\n  let currentTime = 0;\n\n  function animateScroll() {\n    currentTime += increment;\n    const val = easeOutCubic(currentTime, start, change, duration);\n    scrollTo(element, val);\n    if (currentTime < duration) {\n      window.requestAnimationFrame(animateScroll);\n    } else {\n      callback(element);\n    }\n  }\n  animateScroll();\n}\n\n// Scroll Into View\n// ------------------------------\n\nexport function scrollIntoView(\n  menuEl: HTMLElement,\n  focusedEl: HTMLElement\n): void {\n  const menuRect = menuEl.getBoundingClientRect();\n  const focusedRect = focusedEl.getBoundingClientRect();\n  const overScroll = focusedEl.offsetHeight / 3;\n\n  if (focusedRect.bottom + overScroll > menuRect.bottom) {\n    scrollTo(\n      menuEl,\n      Math.min(\n        focusedEl.offsetTop +\n          focusedEl.clientHeight -\n          menuEl.offsetHeight +\n          overScroll,\n        menuEl.scrollHeight\n      )\n    );\n  } else if (focusedRect.top - overScroll < menuRect.top) {\n    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));\n  }\n}\n\n// ==============================\n// Get bounding client object\n// ==============================\n\n// cannot get keys using array notation with DOMRect\nexport function getBoundingClientObj(element: HTMLElement) {\n  const rect = element.getBoundingClientRect();\n  return {\n    bottom: rect.bottom,\n    height: rect.height,\n    left: rect.left,\n    right: rect.right,\n    top: rect.top,\n    width: rect.width,\n  };\n}\nexport interface RectType {\n  left: number;\n  right: number;\n  bottom: number;\n  height: number;\n  width: number;\n}\n\n// ==============================\n// String to Key (kebabify)\n// ==============================\n\nexport function toKey(str: string) {\n  return str.replace(/\\W/g, '-');\n}\n\n// ==============================\n// Touch Capability Detector\n// ==============================\n\nexport function isTouchCapable() {\n  try {\n    document.createEvent('TouchEvent');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// ==============================\n// Mobile Device Detector\n// ==============================\n\nexport function isMobileDevice() {\n  try {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n// ==============================\n// Passive Event Detector\n// ==============================\n\n// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36\nlet passiveOptionAccessed = false;\nconst options = {\n  get passive() {\n    return (passiveOptionAccessed = true);\n  },\n};\n// check for SSR\nconst w:\n  | typeof window\n  | { addEventListener?: never; removeEventListener?: never } =\n  typeof window !== 'undefined' ? window : {};\nif (w.addEventListener && w.removeEventListener) {\n  w.addEventListener('p', noop, options);\n  w.removeEventListener('p', noop, false);\n}\n\nexport const supportsPassiveEvents: boolean = passiveOptionAccessed;\n\nexport function notNullish<T>(item: T | null | undefined): item is T {\n  return item != null;\n}\n\nexport function isArray<T>(arg: unknown): arg is readonly T[] {\n  return Array.isArray(arg);\n}\n\nexport function valueTernary<\n  Option extends OptionBase,\n  IsMulti extends boolean\n>(\n  isMulti: IsMulti | undefined,\n  multiValue: MultiValue<Option>,\n  singleValue: SingleValue<Option>\n): OnChangeValue<Option, IsMulti> {\n  return (isMulti ? multiValue : singleValue) as OnChangeValue<Option, IsMulti>;\n}\n\nexport function singleValueAsValue<\n  Option extends OptionBase,\n  IsMulti extends boolean\n>(singleValue: SingleValue<Option>): OnChangeValue<Option, IsMulti> {\n  return singleValue as OnChangeValue<Option, IsMulti>;\n}\n\nexport function multiValueAsValue<\n  Option extends OptionBase,\n  IsMulti extends boolean\n>(multiValue: MultiValue<Option>): OnChangeValue<Option, IsMulti> {\n  return multiValue as OnChangeValue<Option, IsMulti>;\n}\n","/** @jsx jsx */\nimport {\n  createContext,\n  Component,\n  ReactNode,\n  RefCallback,\n  ContextType,\n} from 'react';\nimport { jsx } from '@emotion/react';\nimport { createPortal } from 'react-dom';\n\nimport {\n  animatedScrollTo,\n  getBoundingClientObj,\n  RectType,\n  getScrollParent,\n  getScrollTop,\n  scrollTo,\n} from '../utils';\nimport {\n  MenuPlacement,\n  MenuPosition,\n  CommonProps,\n  Theme,\n  OptionBase,\n  GroupBase,\n  CommonPropsAndClassName,\n  CoercedMenuPlacement,\n  CSSObjectWithLabel,\n} from '../types';\n\n// ==============================\n// Menu\n// ==============================\n\n// Get Menu Placement\n// ------------------------------\n\ninterface MenuState {\n  placement: CoercedMenuPlacement | null;\n  maxHeight: number;\n}\ninterface PlacementArgs {\n  maxHeight: number;\n  menuEl: HTMLDivElement | null;\n  minHeight: number;\n  placement: MenuPlacement;\n  shouldScroll: boolean;\n  isFixedPosition: boolean;\n  theme: Theme;\n}\n\nexport function getMenuPlacement({\n  maxHeight,\n  menuEl,\n  minHeight,\n  placement,\n  shouldScroll,\n  isFixedPosition,\n  theme,\n}: PlacementArgs): MenuState {\n  const { spacing } = theme;\n  const scrollParent = getScrollParent(menuEl!);\n  const defaultState: MenuState = { placement: 'bottom', maxHeight };\n\n  // something went wrong, return default state\n  if (!menuEl || !menuEl.offsetParent) return defaultState;\n\n  // we can't trust `scrollParent.scrollHeight` --> it may increase when\n  // the menu is rendered\n  const { height: scrollHeight } = scrollParent.getBoundingClientRect();\n  const {\n    bottom: menuBottom,\n    height: menuHeight,\n    top: menuTop,\n  } = menuEl.getBoundingClientRect();\n\n  const { top: containerTop } = menuEl.offsetParent.getBoundingClientRect();\n  const viewHeight = window.innerHeight;\n  const scrollTop = getScrollTop(scrollParent);\n\n  const marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);\n  const marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);\n  const viewSpaceAbove = containerTop - marginTop;\n  const viewSpaceBelow = viewHeight - menuTop;\n  const scrollSpaceAbove = viewSpaceAbove + scrollTop;\n  const scrollSpaceBelow = scrollHeight - scrollTop - menuTop;\n\n  const scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;\n  const scrollUp = scrollTop + menuTop - marginTop;\n  const scrollDuration = 160;\n\n  switch (placement) {\n    case 'auto':\n    case 'bottom':\n      // 1: the menu will fit, do nothing\n      if (viewSpaceBelow >= menuHeight) {\n        return { placement: 'bottom', maxHeight };\n      }\n\n      // 2: the menu will fit, if scrolled\n      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {\n        if (shouldScroll) {\n          animatedScrollTo(scrollParent, scrollDown, scrollDuration);\n        }\n\n        return { placement: 'bottom', maxHeight };\n      }\n\n      // 3: the menu will fit, if constrained\n      if (\n        (!isFixedPosition && scrollSpaceBelow >= minHeight) ||\n        (isFixedPosition && viewSpaceBelow >= minHeight)\n      ) {\n        if (shouldScroll) {\n          animatedScrollTo(scrollParent, scrollDown, scrollDuration);\n        }\n\n        // we want to provide as much of the menu as possible to the user,\n        // so give them whatever is available below rather than the minHeight.\n        const constrainedHeight = isFixedPosition\n          ? viewSpaceBelow - marginBottom\n          : scrollSpaceBelow - marginBottom;\n\n        return {\n          placement: 'bottom',\n          maxHeight: constrainedHeight,\n        };\n      }\n\n      // 4. Forked beviour when there isn't enough space below\n\n      // AUTO: flip the menu, render above\n      if (placement === 'auto' || isFixedPosition) {\n        // may need to be constrained after flipping\n        let constrainedHeight = maxHeight;\n        const spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;\n\n        if (spaceAbove >= minHeight) {\n          constrainedHeight = Math.min(\n            spaceAbove - marginBottom - spacing.controlHeight,\n            maxHeight\n          );\n        }\n\n        return { placement: 'top', maxHeight: constrainedHeight };\n      }\n\n      // BOTTOM: allow browser to increase scrollable area and immediately set scroll\n      if (placement === 'bottom') {\n        if (shouldScroll) {\n          scrollTo(scrollParent, scrollDown);\n        }\n        return { placement: 'bottom', maxHeight };\n      }\n      break;\n    case 'top':\n      // 1: the menu will fit, do nothing\n      if (viewSpaceAbove >= menuHeight) {\n        return { placement: 'top', maxHeight };\n      }\n\n      // 2: the menu will fit, if scrolled\n      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {\n        if (shouldScroll) {\n          animatedScrollTo(scrollParent, scrollUp, scrollDuration);\n        }\n\n        return { placement: 'top', maxHeight };\n      }\n\n      // 3: the menu will fit, if constrained\n      if (\n        (!isFixedPosition && scrollSpaceAbove >= minHeight) ||\n        (isFixedPosition && viewSpaceAbove >= minHeight)\n      ) {\n        let constrainedHeight = maxHeight;\n\n        // we want to provide as much of the menu as possible to the user,\n        // so give them whatever is available below rather than the minHeight.\n        if (\n          (!isFixedPosition && scrollSpaceAbove >= minHeight) ||\n          (isFixedPosition && viewSpaceAbove >= minHeight)\n        ) {\n          constrainedHeight = isFixedPosition\n            ? viewSpaceAbove - marginTop\n            : scrollSpaceAbove - marginTop;\n        }\n\n        if (shouldScroll) {\n          animatedScrollTo(scrollParent, scrollUp, scrollDuration);\n        }\n\n        return {\n          placement: 'top',\n          maxHeight: constrainedHeight,\n        };\n      }\n\n      // 4. not enough space, the browser WILL NOT increase scrollable area when\n      // absolutely positioned element rendered above the viewport (only below).\n      // Flip the menu, render below\n      return { placement: 'bottom', maxHeight };\n    default:\n      throw new Error(`Invalid placement provided \"${placement}\".`);\n  }\n\n  return defaultState;\n}\n\n// Menu Component\n// ------------------------------\n\nexport interface MenuPlacementProps {\n  /** Set the minimum height of the menu. */\n  minMenuHeight: number;\n  /** Set the maximum height of the menu. */\n  maxMenuHeight: number;\n  /** Set whether the menu should be at the top, at the bottom. The auto options sets it to bottom. */\n  menuPlacement: MenuPlacement;\n  /** The CSS position value of the menu, when \"fixed\" extra layout management is required */\n  menuPosition: MenuPosition;\n  /** Set whether the page should scroll to show the menu. */\n  menuShouldScrollIntoView: boolean;\n}\n\nexport interface MenuProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group>,\n    MenuPlacementProps {\n  /** Reference to the internal element, consumed by the MenuPlacer component */\n  innerRef: RefCallback<HTMLDivElement>;\n  innerProps: JSX.IntrinsicElements['div'];\n  isLoading: boolean;\n  placement: CoercedMenuPlacement;\n  /** The children to be rendered. */\n  children: ReactNode;\n}\n\ninterface PlacerProps {\n  placement: CoercedMenuPlacement;\n  maxHeight: number;\n}\n\ninterface ChildrenProps {\n  ref: RefCallback<HTMLDivElement>;\n  placerProps: PlacerProps;\n}\n\nexport interface MenuPlacerProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends CommonProps<Option, IsMulti, Group>,\n    MenuPlacementProps {\n  /** The children to be rendered. */\n  children: (childrenProps: ChildrenProps) => ReactNode;\n}\n\nfunction alignToControl(placement: CoercedMenuPlacement) {\n  const placementToCSSProp = { bottom: 'top', top: 'bottom' };\n  return placement ? placementToCSSProp[placement] : 'bottom';\n}\nconst coercePlacement = (p: MenuPlacement) => (p === 'auto' ? 'bottom' : p);\n\nexport const menuCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  placement,\n  theme: { borderRadius, spacing, colors },\n}: MenuProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'menu',\n  [alignToControl(placement)]: '100%',\n  backgroundColor: colors.neutral0,\n  borderRadius: borderRadius,\n  boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',\n  marginBottom: spacing.menuGutter,\n  marginTop: spacing.menuGutter,\n  position: 'absolute',\n  width: '100%',\n  zIndex: 1,\n});\n\nconst PortalPlacementContext = createContext<{\n  getPortalPlacement: ((menuState: MenuState) => void) | null;\n}>({ getPortalPlacement: null });\n\n// NOTE: internal only\nexport class MenuPlacer<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends Component<MenuPlacerProps<Option, IsMulti, Group>, MenuState> {\n  state: MenuState = {\n    maxHeight: this.props.maxMenuHeight,\n    placement: null,\n  };\n  static contextType = PortalPlacementContext;\n  context!: ContextType<typeof PortalPlacementContext>;\n\n  getPlacement: RefCallback<HTMLDivElement> = (ref) => {\n    const {\n      minMenuHeight,\n      maxMenuHeight,\n      menuPlacement,\n      menuPosition,\n      menuShouldScrollIntoView,\n      theme,\n    } = this.props;\n\n    if (!ref) return;\n\n    // DO NOT scroll if position is fixed\n    const isFixedPosition = menuPosition === 'fixed';\n    const shouldScroll = menuShouldScrollIntoView && !isFixedPosition;\n\n    const state = getMenuPlacement({\n      maxHeight: maxMenuHeight,\n      menuEl: ref,\n      minHeight: minMenuHeight,\n      placement: menuPlacement,\n      shouldScroll,\n      isFixedPosition,\n      theme,\n    });\n\n    const { getPortalPlacement } = this.context;\n    if (getPortalPlacement) getPortalPlacement(state);\n\n    this.setState(state);\n  };\n  getUpdatedProps = () => {\n    const { menuPlacement } = this.props;\n    const placement = this.state.placement || coercePlacement(menuPlacement);\n\n    return { ...this.props, placement, maxHeight: this.state.maxHeight };\n  };\n  render() {\n    const { children } = this.props;\n\n    return children({\n      ref: this.getPlacement,\n      placerProps: this.getUpdatedProps(),\n    });\n  }\n}\n\nconst Menu = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: MenuProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerRef, innerProps } = props;\n\n  return (\n    <div\n      css={getStyles('menu', props)}\n      className={cx({ menu: true }, className)}\n      ref={innerRef}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Menu;\n\n// ==============================\n// Menu List\n// ==============================\n\nexport interface MenuListProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Set the max height of the Menu component  */\n  maxHeight: number;\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Inner ref to DOM ReactNode */\n  innerRef: RefCallback<HTMLDivElement>;\n  /** The currently focused option */\n  focusedOption: Option;\n  /** Props to be passed to the menu-list wrapper. */\n  innerProps: JSX.IntrinsicElements['div'];\n}\nexport const menuListCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  maxHeight,\n  theme: {\n    spacing: { baseUnit },\n  },\n}: MenuListProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  maxHeight,\n  overflowY: 'auto',\n  paddingBottom: baseUnit,\n  paddingTop: baseUnit,\n  position: 'relative', // required for offset[Height, Top] > keyboard scroll\n  WebkitOverflowScrolling: 'touch',\n});\nexport const MenuList = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: MenuListProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps, innerRef, isMulti } =\n    props;\n  return (\n    <div\n      css={getStyles('menuList', props)}\n      className={cx(\n        {\n          'menu-list': true,\n          'menu-list--is-multi': isMulti,\n        },\n        className\n      )}\n      ref={innerRef}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\n// ==============================\n// Menu Notices\n// ==============================\n\nconst noticeCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: {\n    spacing: { baseUnit },\n    colors,\n  },\n}: NoticeProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  color: colors.neutral40,\n  padding: `${baseUnit * 2}px ${baseUnit * 3}px`,\n  textAlign: 'center',\n});\nexport const noOptionsMessageCSS = noticeCSS;\nexport const loadingMessageCSS = noticeCSS;\n\nexport interface NoticeProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Props to be passed on to the wrapper. */\n  innerProps: JSX.IntrinsicElements['div'];\n}\n\nexport const NoOptionsMessage = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: NoticeProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps } = props;\n  return (\n    <div\n      css={getStyles('noOptionsMessage', props)}\n      className={cx(\n        {\n          'menu-notice': true,\n          'menu-notice--no-options': true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\nNoOptionsMessage.defaultProps = {\n  children: 'No options',\n};\n\nexport const LoadingMessage = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: NoticeProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps } = props;\n  return (\n    <div\n      css={getStyles('loadingMessage', props)}\n      className={cx(\n        {\n          'menu-notice': true,\n          'menu-notice--loading': true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\nLoadingMessage.defaultProps = {\n  children: 'Loading...',\n};\n\n// ==============================\n// Menu Portal\n// ==============================\n\nexport interface MenuPortalProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  appendTo: HTMLElement | undefined;\n  children: ReactNode; // ideally Menu<MenuProps>\n  controlElement: HTMLDivElement | null;\n  innerProps: JSX.IntrinsicElements['div'];\n  menuPlacement: MenuPlacement;\n  menuPosition: MenuPosition;\n}\n\ninterface MenuPortalState {\n  placement: 'bottom' | 'top' | null;\n}\n\nexport interface PortalStyleArgs {\n  offset: number;\n  position: MenuPosition;\n  rect: RectType;\n}\n\nexport const menuPortalCSS = ({\n  rect,\n  offset,\n  position,\n}: PortalStyleArgs): CSSObjectWithLabel => ({\n  left: rect.left,\n  position: position,\n  top: offset,\n  width: rect.width,\n  zIndex: 1,\n});\n\nexport class MenuPortal<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends Component<MenuPortalProps<Option, IsMulti, Group>, MenuPortalState> {\n  state: MenuPortalState = { placement: null };\n\n  // callback for occassions where the menu must \"flip\"\n  getPortalPlacement = ({ placement }: MenuState) => {\n    const initialPlacement = coercePlacement(this.props.menuPlacement);\n\n    // avoid re-renders if the placement has not changed\n    if (placement !== initialPlacement) {\n      this.setState({ placement });\n    }\n  };\n  render() {\n    const {\n      appendTo,\n      children,\n      className,\n      controlElement,\n      cx,\n      innerProps,\n      menuPlacement,\n      menuPosition: position,\n      getStyles,\n    } = this.props;\n    const isFixed = position === 'fixed';\n\n    // bail early if required elements aren't present\n    if ((!appendTo && !isFixed) || !controlElement) {\n      return null;\n    }\n\n    const placement = this.state.placement || coercePlacement(menuPlacement);\n    const rect = getBoundingClientObj(controlElement);\n    const scrollDistance = isFixed ? 0 : window.pageYOffset;\n    const offset = rect[placement] + scrollDistance;\n    const state = { offset, position, rect };\n\n    // same wrapper element whether fixed or portalled\n    const menuWrapper = (\n      <div\n        css={getStyles('menuPortal', state)}\n        className={cx(\n          {\n            'menu-portal': true,\n          },\n          className\n        )}\n        {...innerProps}\n      >\n        {children}\n      </div>\n    );\n\n    return (\n      <PortalPlacementContext.Provider\n        value={{ getPortalPlacement: this.getPortalPlacement }}\n      >\n        {appendTo ? createPortal(menuWrapper, appendTo) : menuWrapper}\n      </PortalPlacementContext.Provider>\n    );\n  }\n}\n","const diacritics = [\n  {\n    base: 'A',\n    letters:\n      '\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F',\n  },\n  { base: 'AA', letters: '\\uA732' },\n  { base: 'AE', letters: '\\u00C6\\u01FC\\u01E2' },\n  { base: 'AO', letters: '\\uA734' },\n  { base: 'AU', letters: '\\uA736' },\n  { base: 'AV', letters: '\\uA738\\uA73A' },\n  { base: 'AY', letters: '\\uA73C' },\n  {\n    base: 'B',\n    letters: '\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181',\n  },\n  {\n    base: 'C',\n    letters:\n      '\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E',\n  },\n  {\n    base: 'D',\n    letters:\n      '\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779',\n  },\n  { base: 'DZ', letters: '\\u01F1\\u01C4' },\n  { base: 'Dz', letters: '\\u01F2\\u01C5' },\n  {\n    base: 'E',\n    letters:\n      '\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E',\n  },\n  { base: 'F', letters: '\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B' },\n  {\n    base: 'G',\n    letters:\n      '\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E',\n  },\n  {\n    base: 'H',\n    letters:\n      '\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D',\n  },\n  {\n    base: 'I',\n    letters:\n      '\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197',\n  },\n  { base: 'J', letters: '\\u004A\\u24BF\\uFF2A\\u0134\\u0248' },\n  {\n    base: 'K',\n    letters:\n      '\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2',\n  },\n  {\n    base: 'L',\n    letters:\n      '\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780',\n  },\n  { base: 'LJ', letters: '\\u01C7' },\n  { base: 'Lj', letters: '\\u01C8' },\n  { base: 'M', letters: '\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C' },\n  {\n    base: 'N',\n    letters:\n      '\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4',\n  },\n  { base: 'NJ', letters: '\\u01CA' },\n  { base: 'Nj', letters: '\\u01CB' },\n  {\n    base: 'O',\n    letters:\n      '\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C',\n  },\n  { base: 'OI', letters: '\\u01A2' },\n  { base: 'OO', letters: '\\uA74E' },\n  { base: 'OU', letters: '\\u0222' },\n  {\n    base: 'P',\n    letters: '\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754',\n  },\n  { base: 'Q', letters: '\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A' },\n  {\n    base: 'R',\n    letters:\n      '\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782',\n  },\n  {\n    base: 'S',\n    letters:\n      '\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784',\n  },\n  {\n    base: 'T',\n    letters:\n      '\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786',\n  },\n  { base: 'TZ', letters: '\\uA728' },\n  {\n    base: 'U',\n    letters:\n      '\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244',\n  },\n  { base: 'V', letters: '\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245' },\n  { base: 'VY', letters: '\\uA760' },\n  {\n    base: 'W',\n    letters: '\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72',\n  },\n  { base: 'X', letters: '\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C' },\n  {\n    base: 'Y',\n    letters:\n      '\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE',\n  },\n  {\n    base: 'Z',\n    letters:\n      '\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762',\n  },\n  {\n    base: 'a',\n    letters:\n      '\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250',\n  },\n  { base: 'aa', letters: '\\uA733' },\n  { base: 'ae', letters: '\\u00E6\\u01FD\\u01E3' },\n  { base: 'ao', letters: '\\uA735' },\n  { base: 'au', letters: '\\uA737' },\n  { base: 'av', letters: '\\uA739\\uA73B' },\n  { base: 'ay', letters: '\\uA73D' },\n  {\n    base: 'b',\n    letters: '\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253',\n  },\n  {\n    base: 'c',\n    letters:\n      '\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184',\n  },\n  {\n    base: 'd',\n    letters:\n      '\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A',\n  },\n  { base: 'dz', letters: '\\u01F3\\u01C6' },\n  {\n    base: 'e',\n    letters:\n      '\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD',\n  },\n  { base: 'f', letters: '\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C' },\n  {\n    base: 'g',\n    letters:\n      '\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F',\n  },\n  {\n    base: 'h',\n    letters:\n      '\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265',\n  },\n  { base: 'hv', letters: '\\u0195' },\n  {\n    base: 'i',\n    letters:\n      '\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131',\n  },\n  { base: 'j', letters: '\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249' },\n  {\n    base: 'k',\n    letters:\n      '\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3',\n  },\n  {\n    base: 'l',\n    letters:\n      '\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747',\n  },\n  { base: 'lj', letters: '\\u01C9' },\n  { base: 'm', letters: '\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F' },\n  {\n    base: 'n',\n    letters:\n      '\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5',\n  },\n  { base: 'nj', letters: '\\u01CC' },\n  {\n    base: 'o',\n    letters:\n      '\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275',\n  },\n  { base: 'oi', letters: '\\u01A3' },\n  { base: 'ou', letters: '\\u0223' },\n  { base: 'oo', letters: '\\uA74F' },\n  {\n    base: 'p',\n    letters: '\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755',\n  },\n  { base: 'q', letters: '\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759' },\n  {\n    base: 'r',\n    letters:\n      '\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783',\n  },\n  {\n    base: 's',\n    letters:\n      '\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B',\n  },\n  {\n    base: 't',\n    letters:\n      '\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787',\n  },\n  { base: 'tz', letters: '\\uA729' },\n  {\n    base: 'u',\n    letters:\n      '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289',\n  },\n  { base: 'v', letters: '\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C' },\n  { base: 'vy', letters: '\\uA761' },\n  {\n    base: 'w',\n    letters:\n      '\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73',\n  },\n  { base: 'x', letters: '\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D' },\n  {\n    base: 'y',\n    letters:\n      '\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF',\n  },\n  {\n    base: 'z',\n    letters:\n      '\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763',\n  },\n];\n\nconst anyDiacritic = new RegExp(\n  '[' + diacritics.map((d) => d.letters).join('') + ']',\n  'g'\n);\nconst diacriticToBase: { [letters: string]: string } = {};\n\nfor (let i = 0; i < diacritics.length; i++) {\n  let diacritic = diacritics[i];\n  for (let j = 0; j < diacritic.letters.length; j++) {\n    diacriticToBase[diacritic.letters[j]] = diacritic.base;\n  }\n}\n\nexport const stripDiacritics = (str: string) => {\n  return str.replace(anyDiacritic, (match) => diacriticToBase[match]);\n};\n","/** @jsx jsx */\nimport { jsx } from '@emotion/react';\n\n// Assistive text to describe visual elements. Hidden for sighted users.\nconst A11yText = (props: JSX.IntrinsicElements['span']) => (\n  <span\n    css={{\n      label: 'a11yText',\n      zIndex: 9999,\n      border: 0,\n      clip: 'rect(1px, 1px, 1px, 1px)',\n      height: 1,\n      width: 1,\n      position: 'absolute',\n      overflow: 'hidden',\n      padding: 0,\n      whiteSpace: 'nowrap',\n    }}\n    {...props}\n  />\n);\n\nexport default A11yText;\n","import {\n  ActionMeta,\n  GroupBase,\n  InitialInputFocusedActionMeta,\n  OnChangeValue,\n  OptionBase,\n  Options,\n  OptionsOrGroups,\n} from '../types';\n\nexport type OptionContext = 'menu' | 'value';\n\nexport type GuidanceContext = 'menu' | 'input' | 'value';\n\nexport type AriaLive = 'polite' | 'off' | 'assertive';\n\nexport type AriaSelection<Option extends OptionBase, IsMulti extends boolean> =\n  | InitialInputFocusedActionMeta<Option, IsMulti>\n  | (ActionMeta<Option> & {\n      value: OnChangeValue<Option, IsMulti>;\n      option?: Option;\n      options?: Options<Option>;\n    });\n\nexport interface AriaGuidanceProps {\n  /** String value of selectProp aria-label */\n  'aria-label': string | undefined;\n  /** String indicating user's current context and available keyboard interactivity */\n  context: GuidanceContext;\n  /** Boolean value of selectProp isSearchable */\n  isSearchable: boolean;\n  /** Boolean value of selectProp isMulti */\n  isMulti: boolean;\n  /** Boolean value of selectProp isDisabled */\n  isDisabled: boolean | null;\n  /** Boolean value of selectProp tabSelectsValue */\n  tabSelectsValue: boolean;\n}\n\nexport type AriaOnChangeProps<\n  Option extends OptionBase,\n  IsMulti extends boolean\n> = AriaSelection<Option, IsMulti> & {\n  /** String derived label from selected or removed option/value */\n  label: string;\n  /** Array of labels derived from multiple selected or cleared options */\n  labels: string[];\n  /** Boolean indicating if the selected menu option is disabled */\n  isDisabled: boolean | null;\n};\n\nexport interface AriaOnFilterProps {\n  /** String indicating current inputValue of the input */\n  inputValue: string;\n  /** String derived from selectProp screenReaderStatus */\n  resultsMessage: string;\n}\n\nexport interface AriaOnFocusProps<\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n> {\n  /** String indicating whether the option was focused in the menu or as (multi-) value */\n  context: OptionContext;\n  /** Option that is being focused */\n  focused: Option;\n  /** Boolean indicating whether focused menu option has been disabled */\n  isDisabled: boolean;\n  /** Boolean indicating whether focused menu option is an already selected option */\n  isSelected: boolean;\n  /** String derived label from focused option/value */\n  label: string;\n  /** Options provided as props to Select used to determine indexing */\n  options: OptionsOrGroups<Option, Group>;\n  /** selected option(s) of the Select */\n  selectValue: Options<Option>;\n}\n\nexport type AriaGuidance = (props: AriaGuidanceProps) => string;\nexport type AriaOnChange<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean\n> = (props: AriaOnChangeProps<Option, IsMulti>) => string;\nexport type AriaOnFilter = (props: AriaOnFilterProps) => string;\nexport type AriaOnFocus<\n  Option extends OptionBase = OptionBase,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> = (props: AriaOnFocusProps<Option, Group>) => string;\n\nexport interface AriaLiveMessages<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  /** Guidance message used to convey component state and specific keyboard interactivity */\n  guidance?: (props: AriaGuidanceProps) => string;\n  /** OnChange message used to convey changes to value but also called when user selects disabled option */\n  onChange?: (props: AriaOnChangeProps<Option, IsMulti>) => string;\n  /** OnFilter message used to convey information about filtered results displayed in the menu */\n  onFilter?: (props: AriaOnFilterProps) => string;\n  /** OnFocus message used to convey information about the currently focused option or value */\n  onFocus?: (props: AriaOnFocusProps<Option, Group>) => string;\n}\n\nexport const defaultAriaLiveMessages = {\n  guidance: (props: AriaGuidanceProps) => {\n    const { isSearchable, isMulti, isDisabled, tabSelectsValue, context } =\n      props;\n    switch (context) {\n      case 'menu':\n        return `Use Up and Down to choose options${\n          isDisabled\n            ? ''\n            : ', press Enter to select the currently focused option'\n        }, press Escape to exit the menu${\n          tabSelectsValue\n            ? ', press Tab to select the option and exit the menu'\n            : ''\n        }.`;\n      case 'input':\n        return `${props['aria-label'] || 'Select'} is focused ${\n          isSearchable ? ',type to refine list' : ''\n        }, press Down to open the menu, ${\n          isMulti ? ' press left to focus selected values' : ''\n        }`;\n      case 'value':\n        return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';\n      default:\n        return '';\n    }\n  },\n\n  onChange: <Option extends OptionBase, IsMulti extends boolean>(\n    props: AriaOnChangeProps<Option, IsMulti>\n  ) => {\n    const { action, label = '', labels, isDisabled } = props;\n    switch (action) {\n      case 'deselect-option':\n      case 'pop-value':\n      case 'remove-value':\n        return `option ${label}, deselected.`;\n      case 'clear':\n        return 'All selected options have been cleared.';\n      case 'initial-input-focus':\n        return `option${labels.length > 1 ? 's' : ''} ${labels.join(\n          ','\n        )}, selected.`;\n      case 'select-option':\n        return isDisabled\n          ? `option ${label} is disabled. Select another option.`\n          : `option ${label}, selected.`;\n      default:\n        return '';\n    }\n  },\n\n  onFocus: <Option extends OptionBase, Group extends GroupBase<Option>>(\n    props: AriaOnFocusProps<Option, Group>\n  ) => {\n    const {\n      context,\n      focused,\n      options,\n      label = '',\n      selectValue,\n      isDisabled,\n      isSelected,\n    } = props;\n\n    const getArrayIndex = (arr: OptionsOrGroups<Option, Group>, item: Option) =>\n      arr && arr.length ? `${arr.indexOf(item) + 1} of ${arr.length}` : '';\n\n    if (context === 'value' && selectValue) {\n      return `value ${label} focused, ${getArrayIndex(selectValue, focused)}.`;\n    }\n\n    if (context === 'menu') {\n      const disabled = isDisabled ? ' disabled' : '';\n      const status = `${isSelected ? 'selected' : 'focused'}${disabled}`;\n      return `option ${label} ${status}, ${getArrayIndex(options, focused)}.`;\n    }\n    return '';\n  },\n\n  onFilter: (props: AriaOnFilterProps) => {\n    const { inputValue, resultsMessage } = props;\n    return `${resultsMessage}${\n      inputValue ? ' for search term ' + inputValue : ''\n    }.`;\n  },\n};\n","/** @jsx jsx */\nimport React, { ReactNode, useMemo } from 'react';\nimport { jsx } from '@emotion/react';\nimport A11yText from '../internal/A11yText';\nimport { defaultAriaLiveMessages, AriaSelection } from '../accessibility';\n\nimport {\n  CommonProps,\n  GroupBase,\n  OnChangeValue,\n  OptionBase,\n  Options,\n} from '../types';\n\n// ==============================\n// Root Container\n// ==============================\n\nexport interface LiveRegionProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends CommonProps<Option, IsMulti, Group> {\n  children: ReactNode;\n  innerProps: { className?: string };\n  // Select state variables\n  ariaSelection: AriaSelection<Option, IsMulti>;\n  focusedOption: Option | null;\n  focusedValue: Option | null;\n  selectValue: Options<Option>;\n  focusableOptions: Options<Option>;\n  isFocused: boolean;\n  id: string;\n}\n\nconst LiveRegion = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: LiveRegionProps<Option, IsMulti, Group>\n) => {\n  const {\n    ariaSelection,\n    focusedOption,\n    focusedValue,\n    focusableOptions,\n    isFocused,\n    selectValue,\n    selectProps,\n    id,\n  } = props;\n\n  const {\n    ariaLiveMessages,\n    getOptionLabel,\n    inputValue,\n    isMulti,\n    isOptionDisabled,\n    isSearchable,\n    menuIsOpen,\n    options,\n    screenReaderStatus,\n    tabSelectsValue,\n  } = selectProps;\n  const ariaLabel = selectProps['aria-label'];\n  const ariaLive = selectProps['aria-live'];\n\n  // Update aria live message configuration when prop changes\n  const messages = useMemo(\n    () => ({\n      ...defaultAriaLiveMessages,\n      ...(ariaLiveMessages || {}),\n    }),\n    [ariaLiveMessages]\n  );\n\n  // Update aria live selected option when prop changes\n  const ariaSelected = useMemo(() => {\n    let message = '';\n    if (ariaSelection && messages.onChange) {\n      const {\n        option,\n        options: selectedOptions,\n        removedValue,\n        removedValues,\n        value,\n      } = ariaSelection;\n      // select-option when !isMulti does not return option so we assume selected option is value\n      const asOption = (val: OnChangeValue<Option, IsMulti>): Option | null =>\n        !Array.isArray(val) ? (val as Option) : null;\n\n      // If there is just one item from the action then get its label\n      const selected = removedValue || option || asOption(value);\n      const label = selected ? getOptionLabel(selected) : '';\n\n      // If there are multiple items from the action then return an array of labels\n      const multiSelected = selectedOptions || removedValues || undefined;\n      const labels = multiSelected ? multiSelected.map(getOptionLabel) : [];\n\n      const onChangeProps = {\n        // multiSelected items are usually items that have already been selected\n        // or set by the user as a default value so we assume they are not disabled\n        isDisabled: selected && isOptionDisabled(selected, selectValue),\n        label,\n        labels,\n        ...ariaSelection,\n      };\n\n      message = messages.onChange(onChangeProps);\n    }\n    return message;\n  }, [ariaSelection, messages, isOptionDisabled, selectValue, getOptionLabel]);\n\n  const ariaFocused = useMemo(() => {\n    let focusMsg = '';\n    const focused = focusedOption || focusedValue;\n    const isSelected = !!(\n      focusedOption &&\n      selectValue &&\n      selectValue.includes(focusedOption)\n    );\n\n    if (focused && messages.onFocus) {\n      const onFocusProps = {\n        focused,\n        label: getOptionLabel(focused),\n        isDisabled: isOptionDisabled(focused, selectValue),\n        isSelected,\n        options,\n        context:\n          focused === focusedOption ? ('menu' as const) : ('value' as const),\n        selectValue,\n      };\n\n      focusMsg = messages.onFocus(onFocusProps);\n    }\n    return focusMsg;\n  }, [\n    focusedOption,\n    focusedValue,\n    getOptionLabel,\n    isOptionDisabled,\n    messages,\n    options,\n    selectValue,\n  ]);\n\n  const ariaResults = useMemo(() => {\n    let resultsMsg = '';\n    if (menuIsOpen && options.length && messages.onFilter) {\n      const resultsMessage = screenReaderStatus({\n        count: focusableOptions.length,\n      });\n      resultsMsg = messages.onFilter({ inputValue, resultsMessage });\n    }\n    return resultsMsg;\n  }, [\n    focusableOptions,\n    inputValue,\n    menuIsOpen,\n    messages,\n    options,\n    screenReaderStatus,\n  ]);\n\n  const ariaGuidance = useMemo(() => {\n    let guidanceMsg = '';\n    if (messages.guidance) {\n      const context = focusedValue ? 'value' : menuIsOpen ? 'menu' : 'input';\n      guidanceMsg = messages.guidance({\n        'aria-label': ariaLabel,\n        context,\n        isDisabled:\n          focusedOption && isOptionDisabled(focusedOption, selectValue),\n        isMulti,\n        isSearchable,\n        tabSelectsValue,\n      });\n    }\n    return guidanceMsg;\n  }, [\n    ariaLabel,\n    focusedOption,\n    focusedValue,\n    isMulti,\n    isOptionDisabled,\n    isSearchable,\n    menuIsOpen,\n    messages,\n    selectValue,\n    tabSelectsValue,\n  ]);\n\n  const ariaContext = `${ariaFocused} ${ariaResults} ${ariaGuidance}`;\n\n  const ScreenReaderText = (\n    <React.Fragment>\n      <span id=\"aria-selection\">{ariaSelected}</span>\n      <span id=\"aria-context\">{ariaContext}</span>\n    </React.Fragment>\n  );\n\n  const isInitialFocus = ariaSelection?.action === 'initial-input-focus';\n\n  return (\n    <React.Fragment>\n      {/* We use 'aria-describedby' linked to this component for the initial focus */}\n      {/* action, then for all other actions we use the live region below */}\n      <A11yText id={id}>{isInitialFocus && ScreenReaderText}</A11yText>\n      <A11yText\n        aria-live={ariaLive}\n        aria-atomic=\"false\"\n        aria-relevant=\"additions text\"\n      >\n        {isFocused && !isInitialFocus && ScreenReaderText}\n      </A11yText>\n    </React.Fragment>\n  );\n};\n\nexport default LiveRegion;\n","import memoizeOne from 'memoize-one';\nimport { stripDiacritics } from './diacritics';\nimport { OptionBase } from './types';\n\nexport interface FilterOptionOption<Option extends OptionBase> {\n  readonly label: string;\n  readonly value: string;\n  readonly data: Option;\n}\n\ninterface Config<Option extends OptionBase> {\n  readonly ignoreCase?: boolean;\n  readonly ignoreAccents?: boolean;\n  readonly stringify?: (option: FilterOptionOption<Option>) => string;\n  readonly trim?: boolean;\n  readonly matchFrom?: 'any' | 'start';\n}\n\nconst memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);\n\nconst trimString = (str: string) => str.replace(/^\\s+|\\s+$/g, '');\nconst defaultStringify = <Option extends OptionBase>(\n  option: FilterOptionOption<Option>\n) => `${option.label} ${option.value}`;\n\nexport const createFilter =\n  <Option extends OptionBase>(config?: Config<Option>) =>\n  (option: FilterOptionOption<Option>, rawInput: string): boolean => {\n    // eslint-disable-next-line no-underscore-dangle\n    if (option.data.__isNew__) return true;\n    const { ignoreCase, ignoreAccents, stringify, trim, matchFrom } = {\n      ignoreCase: true,\n      ignoreAccents: true,\n      stringify: defaultStringify,\n      trim: true,\n      matchFrom: 'any',\n      ...config,\n    };\n    let input = trim ? trimString(rawInput) : rawInput;\n    let candidate = trim ? trimString(stringify(option)) : stringify(option);\n    if (ignoreCase) {\n      input = input.toLowerCase();\n      candidate = candidate.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = memoizedStripDiacriticsForInput(input);\n      candidate = stripDiacritics(candidate);\n    }\n    return matchFrom === 'start'\n      ? candidate.substr(0, input.length) === input\n      : candidate.indexOf(input) > -1;\n  };\n","/** @jsx jsx */\nimport { Ref } from 'react';\nimport { jsx } from '@emotion/react';\n\nexport default function DummyInput({\n  innerRef,\n  ...props\n}: JSX.IntrinsicElements['input'] & {\n  readonly innerRef: Ref<HTMLInputElement>;\n}) {\n  return (\n    <input\n      ref={innerRef}\n      {...props}\n      css={{\n        label: 'dummyInput',\n        // get rid of any default styles\n        background: 0,\n        border: 0,\n        // important! this hides the flashing cursor\n        caretColor: 'transparent',\n        fontSize: 'inherit',\n        outline: 0,\n        padding: 0,\n        // important! without `width` browsers won't allow focus\n        width: 1,\n\n        // remove cursor on desktop\n        color: 'transparent',\n\n        // remove cursor on mobile whilst maintaining \"scroll into view\" behaviour\n        left: -100,\n        opacity: 0,\n        position: 'relative',\n        transform: 'scale(.01)',\n      }}\n    />\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nconst STYLE_KEYS = [\n  'boxSizing',\n  'height',\n  'overflow',\n  'paddingRight',\n  'position',\n] as const;\n\nconst LOCK_STYLES = {\n  boxSizing: 'border-box', // account for possible declaration `width: 100%;` on body\n  overflow: 'hidden',\n  position: 'relative',\n  height: '100%',\n};\n\nfunction preventTouchMove(e: TouchEvent) {\n  e.preventDefault();\n}\n\nfunction allowTouchMove(e: TouchEvent) {\n  e.stopPropagation();\n}\n\nfunction preventInertiaScroll(this: HTMLElement) {\n  const top = this.scrollTop;\n  const totalScroll = this.scrollHeight;\n  const currentScroll = top + this.offsetHeight;\n\n  if (top === 0) {\n    this.scrollTop = 1;\n  } else if (currentScroll === totalScroll) {\n    this.scrollTop = top - 1;\n  }\n}\n\n// `ontouchstart` check works on most browsers\n// `maxTouchPoints` works on IE10/11 and Surface\nfunction isTouchDevice() {\n  return 'ontouchstart' in window || navigator.maxTouchPoints;\n}\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet activeScrollLocks = 0;\n\ninterface Options {\n  readonly isEnabled: boolean;\n  readonly accountForScrollbars?: boolean;\n}\n\nconst listenerOptions = {\n  capture: false,\n  passive: false,\n};\n\nexport default function useScrollLock({\n  isEnabled,\n  accountForScrollbars = true,\n}: Options) {\n  const originalStyles = useRef<{ [key: string]: string }>({});\n  const scrollTarget = useRef<HTMLElement | null>(null);\n\n  const addScrollLock = useCallback(\n    (touchScrollTarget: HTMLElement | null) => {\n      if (!canUseDOM) return;\n\n      const target = document.body;\n      const targetStyle = target && target.style;\n\n      if (accountForScrollbars) {\n        // store any styles already applied to the body\n        STYLE_KEYS.forEach((key) => {\n          const val = targetStyle && targetStyle[key];\n          originalStyles.current[key] = val;\n        });\n      }\n\n      // apply the lock styles and padding if this is the first scroll lock\n      if (accountForScrollbars && activeScrollLocks < 1) {\n        const currentPadding =\n          parseInt(originalStyles.current.paddingRight, 10) || 0;\n        const clientWidth = document.body ? document.body.clientWidth : 0;\n        const adjustedPadding =\n          window.innerWidth - clientWidth + currentPadding || 0;\n\n        Object.keys(LOCK_STYLES).forEach((key) => {\n          const val = LOCK_STYLES[key as keyof typeof LOCK_STYLES];\n          if (targetStyle) {\n            targetStyle[key as keyof typeof LOCK_STYLES] = val;\n          }\n        });\n\n        if (targetStyle) {\n          targetStyle.paddingRight = `${adjustedPadding}px`;\n        }\n      }\n\n      // account for touch devices\n      if (target && isTouchDevice()) {\n        // Mobile Safari ignores { overflow: hidden } declaration on the body.\n        target.addEventListener('touchmove', preventTouchMove, listenerOptions);\n\n        // Allow scroll on provided target\n        if (touchScrollTarget) {\n          touchScrollTarget.addEventListener(\n            'touchstart',\n            preventInertiaScroll,\n            listenerOptions\n          );\n          touchScrollTarget.addEventListener(\n            'touchmove',\n            allowTouchMove,\n            listenerOptions\n          );\n        }\n      }\n\n      // increment active scroll locks\n      activeScrollLocks += 1;\n    },\n    [accountForScrollbars]\n  );\n\n  const removeScrollLock = useCallback(\n    (touchScrollTarget: HTMLElement | null) => {\n      if (!canUseDOM) return;\n\n      const target = document.body;\n      const targetStyle = target && target.style;\n\n      // safely decrement active scroll locks\n      activeScrollLocks = Math.max(activeScrollLocks - 1, 0);\n\n      // reapply original body styles, if any\n      if (accountForScrollbars && activeScrollLocks < 1) {\n        STYLE_KEYS.forEach((key) => {\n          const val = originalStyles.current[key];\n          if (targetStyle) {\n            targetStyle[key] = val;\n          }\n        });\n      }\n\n      // remove touch listeners\n      if (target && isTouchDevice()) {\n        target.removeEventListener(\n          'touchmove',\n          preventTouchMove,\n          listenerOptions\n        );\n\n        if (touchScrollTarget) {\n          touchScrollTarget.removeEventListener(\n            'touchstart',\n            preventInertiaScroll,\n            listenerOptions\n          );\n          touchScrollTarget.removeEventListener(\n            'touchmove',\n            allowTouchMove,\n            listenerOptions\n          );\n        }\n      }\n    },\n    [accountForScrollbars]\n  );\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const element = scrollTarget.current;\n    addScrollLock(element);\n\n    return () => {\n      removeScrollLock(element);\n    };\n  }, [isEnabled, addScrollLock, removeScrollLock]);\n\n  return (element: HTMLElement | null) => {\n    scrollTarget.current = element;\n  };\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { ReactElement, RefCallback } from 'react';\nimport useScrollCapture from './useScrollCapture';\nimport useScrollLock from './useScrollLock';\n\ninterface Props {\n  readonly children: (ref: RefCallback<HTMLElement>) => ReactElement;\n  readonly lockEnabled: boolean;\n  readonly captureEnabled: boolean;\n  readonly onBottomArrive?: (event: WheelEvent | TouchEvent) => void;\n  readonly onBottomLeave?: (event: WheelEvent | TouchEvent) => void;\n  readonly onTopArrive?: (event: WheelEvent | TouchEvent) => void;\n  readonly onTopLeave?: (event: WheelEvent | TouchEvent) => void;\n}\n\nconst blurSelectInput = () =>\n  document.activeElement && (document.activeElement as HTMLElement).blur();\n\nexport default function ScrollManager({\n  children,\n  lockEnabled,\n  captureEnabled = true,\n  onBottomArrive,\n  onBottomLeave,\n  onTopArrive,\n  onTopLeave,\n}: Props) {\n  const setScrollCaptureTarget = useScrollCapture({\n    isEnabled: captureEnabled,\n    onBottomArrive,\n    onBottomLeave,\n    onTopArrive,\n    onTopLeave,\n  });\n  const setScrollLockTarget = useScrollLock({ isEnabled: lockEnabled });\n\n  const targetRef: RefCallback<HTMLElement> = (element) => {\n    setScrollCaptureTarget(element);\n    setScrollLockTarget(element);\n  };\n\n  return (\n    <React.Fragment>\n      {lockEnabled && (\n        <div\n          onClick={blurSelectInput}\n          css={{ position: 'fixed', left: 0, bottom: 0, right: 0, top: 0 }}\n        />\n      )}\n      {children(targetRef)}\n    </React.Fragment>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport { supportsPassiveEvents } from '../utils';\n\nconst cancelScroll = (event: WheelEvent | TouchEvent) => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\ninterface Options {\n  readonly isEnabled: boolean;\n  readonly onBottomArrive?: (event: WheelEvent | TouchEvent) => void;\n  readonly onBottomLeave?: (event: WheelEvent | TouchEvent) => void;\n  readonly onTopArrive?: (event: WheelEvent | TouchEvent) => void;\n  readonly onTopLeave?: (event: WheelEvent | TouchEvent) => void;\n}\n\nexport default function useScrollCapture({\n  isEnabled,\n  onBottomArrive,\n  onBottomLeave,\n  onTopArrive,\n  onTopLeave,\n}: Options) {\n  const isBottom = useRef(false);\n  const isTop = useRef(false);\n  const touchStart = useRef(0);\n  const scrollTarget = useRef<HTMLElement | null>(null);\n\n  const handleEventDelta = useCallback(\n    (event: WheelEvent | TouchEvent, delta: number) => {\n      if (scrollTarget.current === null) return;\n\n      const { scrollTop, scrollHeight, clientHeight } = scrollTarget.current;\n      const target = scrollTarget.current;\n      const isDeltaPositive = delta > 0;\n      const availableScroll = scrollHeight - clientHeight - scrollTop;\n      let shouldCancelScroll = false;\n\n      // reset bottom/top flags\n      if (availableScroll > delta && isBottom.current) {\n        if (onBottomLeave) onBottomLeave(event);\n        isBottom.current = false;\n      }\n      if (isDeltaPositive && isTop.current) {\n        if (onTopLeave) onTopLeave(event);\n        isTop.current = false;\n      }\n\n      // bottom limit\n      if (isDeltaPositive && delta > availableScroll) {\n        if (onBottomArrive && !isBottom.current) {\n          onBottomArrive(event);\n        }\n        target.scrollTop = scrollHeight;\n        shouldCancelScroll = true;\n        isBottom.current = true;\n\n        // top limit\n      } else if (!isDeltaPositive && -delta > scrollTop) {\n        if (onTopArrive && !isTop.current) {\n          onTopArrive(event);\n        }\n        target.scrollTop = 0;\n        shouldCancelScroll = true;\n        isTop.current = true;\n      }\n\n      // cancel scroll\n      if (shouldCancelScroll) {\n        cancelScroll(event);\n      }\n    },\n    [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]\n  );\n\n  const onWheel = useCallback(\n    (event: WheelEvent) => {\n      handleEventDelta(event, event.deltaY);\n    },\n    [handleEventDelta]\n  );\n  const onTouchStart = useCallback((event: TouchEvent) => {\n    // set touch start so we can calculate touchmove delta\n    touchStart.current = event.changedTouches[0].clientY;\n  }, []);\n  const onTouchMove = useCallback(\n    (event: TouchEvent) => {\n      const deltaY = touchStart.current - event.changedTouches[0].clientY;\n      handleEventDelta(event, deltaY);\n    },\n    [handleEventDelta]\n  );\n\n  const startListening = useCallback(\n    (el) => {\n      // bail early if no element is available to attach to\n      if (!el) return;\n\n      const notPassive = supportsPassiveEvents ? { passive: false } : false;\n      el.addEventListener('wheel', onWheel, notPassive);\n      el.addEventListener('touchstart', onTouchStart, notPassive);\n      el.addEventListener('touchmove', onTouchMove, notPassive);\n    },\n    [onTouchMove, onTouchStart, onWheel]\n  );\n\n  const stopListening = useCallback(\n    (el) => {\n      // bail early if no element is available to detach from\n      if (!el) return;\n\n      el.removeEventListener('wheel', onWheel, false);\n      el.removeEventListener('touchstart', onTouchStart, false);\n      el.removeEventListener('touchmove', onTouchMove, false);\n    },\n    [onTouchMove, onTouchStart, onWheel]\n  );\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const element = scrollTarget.current;\n    startListening(element);\n\n    return () => {\n      stopListening(element);\n    };\n  }, [isEnabled, startListening, stopListening]);\n\n  return (element: HTMLElement | null) => {\n    scrollTarget.current = element;\n  };\n}\n","import { GroupBase, OptionBase } from './types';\n\nexport const formatGroupLabel = <\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n>(\n  group: Group\n): string => group.label as string;\n\nexport const getOptionLabel = <Option extends OptionBase>(\n  option: Option\n): string => option.label as string;\n\nexport const getOptionValue = <Option extends OptionBase>(\n  option: Option\n): string => option.value as string;\n\nexport const isOptionDisabled = <Option extends OptionBase>(\n  option: Option\n): boolean => !!option.isDisabled;\n","/** @jsx jsx */\nimport { ReactNode } from 'react';\nimport { jsx, keyframes } from '@emotion/react';\n\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\n// ==============================\n// Dropdown & Clear Icons\n// ==============================\n\nconst Svg = ({\n  size,\n  ...props\n}: JSX.IntrinsicElements['svg'] & { size: number }) => (\n  <svg\n    height={size}\n    width={size}\n    viewBox=\"0 0 20 20\"\n    aria-hidden=\"true\"\n    focusable=\"false\"\n    css={{\n      display: 'inline-block',\n      fill: 'currentColor',\n      lineHeight: 1,\n      stroke: 'currentColor',\n      strokeWidth: 0,\n    }}\n    {...props}\n  />\n);\n\nexport type CrossIconProps = JSX.IntrinsicElements['svg'] & { size?: number };\nexport const CrossIcon = (props: CrossIconProps) => (\n  <Svg size={20} {...props}>\n    <path d=\"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\" />\n  </Svg>\n);\nexport type DownChevronProps = JSX.IntrinsicElements['svg'] & { size?: number };\nexport const DownChevron = (props: DownChevronProps) => (\n  <Svg size={20} {...props}>\n    <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\" />\n  </Svg>\n);\n\n// ==============================\n// Dropdown & Clear Buttons\n// ==============================\n\nexport interface DropdownIndicatorProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered inside the indicator. */\n  children?: ReactNode;\n  /** Props that will be passed on to the children. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** The focused state of the select. */\n  isFocused: boolean;\n  isDisabled: boolean;\n}\n\nconst baseCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isFocused,\n  theme: {\n    spacing: { baseUnit },\n    colors,\n  },\n}:\n  | DropdownIndicatorProps<Option, IsMulti, Group>\n  | ClearIndicatorProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'indicatorContainer',\n  color: isFocused ? colors.neutral60 : colors.neutral20,\n  display: 'flex',\n  padding: baseUnit * 2,\n  transition: 'color 150ms',\n\n  ':hover': {\n    color: isFocused ? colors.neutral80 : colors.neutral40,\n  },\n});\n\nexport const dropdownIndicatorCSS = baseCSS;\nexport const DropdownIndicator = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: DropdownIndicatorProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps } = props;\n  return (\n    <div\n      css={getStyles('dropdownIndicator', props)}\n      className={cx(\n        {\n          indicator: true,\n          'dropdown-indicator': true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children || <DownChevron />}\n    </div>\n  );\n};\n\nexport interface ClearIndicatorProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered inside the indicator. */\n  children?: ReactNode;\n  /** Props that will be passed on to the children. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** The focused state of the select. */\n  isFocused: boolean;\n}\n\nexport const clearIndicatorCSS = baseCSS;\nexport const ClearIndicator = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: ClearIndicatorProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps } = props;\n  return (\n    <div\n      css={getStyles('clearIndicator', props)}\n      className={cx(\n        {\n          indicator: true,\n          'clear-indicator': true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children || <CrossIcon />}\n    </div>\n  );\n};\n\n// ==============================\n// Separator\n// ==============================\n\nexport interface IndicatorSeparatorProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  isDisabled: boolean;\n  isFocused: boolean;\n  innerProps?: JSX.IntrinsicElements['span'];\n}\n\nexport const indicatorSeparatorCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  theme: {\n    spacing: { baseUnit },\n    colors,\n  },\n}: IndicatorSeparatorProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'indicatorSeparator',\n  alignSelf: 'stretch',\n  backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,\n  marginBottom: baseUnit * 2,\n  marginTop: baseUnit * 2,\n  width: 1,\n});\n\nexport const IndicatorSeparator = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: IndicatorSeparatorProps<Option, IsMulti, Group>\n) => {\n  const { className, cx, getStyles, innerProps } = props;\n  return (\n    <span\n      {...innerProps}\n      css={getStyles('indicatorSeparator', props)}\n      className={cx({ 'indicator-separator': true }, className)}\n    />\n  );\n};\n\n// ==============================\n// Loading\n// ==============================\n\nconst loadingDotAnimations = keyframes`\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n`;\n\nexport const loadingIndicatorCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isFocused,\n  size,\n  theme: {\n    colors,\n    spacing: { baseUnit },\n  },\n}: LoadingIndicatorProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'loadingIndicator',\n  color: isFocused ? colors.neutral60 : colors.neutral20,\n  display: 'flex',\n  padding: baseUnit * 2,\n  transition: 'color 150ms',\n  alignSelf: 'center',\n  fontSize: size,\n  lineHeight: 1,\n  marginRight: size,\n  textAlign: 'center',\n  verticalAlign: 'middle',\n});\n\ninterface LoadingDotProps {\n  delay: number;\n  offset: boolean;\n}\nconst LoadingDot = ({ delay, offset }: LoadingDotProps) => (\n  <span\n    css={{\n      animation: `${loadingDotAnimations} 1s ease-in-out ${delay}ms infinite;`,\n      backgroundColor: 'currentColor',\n      borderRadius: '1em',\n      display: 'inline-block',\n      marginLeft: offset ? '1em' : undefined,\n      height: '1em',\n      verticalAlign: 'top',\n      width: '1em',\n    }}\n  />\n);\n\nexport interface LoadingIndicatorProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Props that will be passed on to the children. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** The focused state of the select. */\n  isFocused: boolean;\n  isDisabled: boolean;\n  /** Set size of the container. */\n  size: number;\n}\nexport const LoadingIndicator = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: LoadingIndicatorProps<Option, IsMulti, Group>\n) => {\n  const { className, cx, getStyles, innerProps, isRtl } = props;\n\n  return (\n    <div\n      css={getStyles('loadingIndicator', props)}\n      className={cx(\n        {\n          indicator: true,\n          'loading-indicator': true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      <LoadingDot delay={0} offset={isRtl} />\n      <LoadingDot delay={160} offset />\n      <LoadingDot delay={320} offset={!isRtl} />\n    </div>\n  );\n};\nLoadingIndicator.defaultProps = { size: 4 };\n","/** @jsx jsx */\nimport { ReactNode, Ref } from 'react';\nimport { jsx } from '@emotion/react';\n\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\nexport interface ControlProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Children to render. */\n  children: ReactNode;\n  innerRef: Ref<HTMLDivElement>;\n  /** The mouse down event and the innerRef to pass down to the controller element. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** Whether the select is disabled. */\n  isDisabled: boolean;\n  /** Whether the select is focused. */\n  isFocused: boolean;\n  /** Whether the select is expanded. */\n  menuIsOpen: boolean;\n}\n\nexport const css = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  isFocused,\n  theme: { colors, borderRadius, spacing },\n}: ControlProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'control',\n  alignItems: 'center',\n  backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,\n  borderColor: isDisabled\n    ? colors.neutral10\n    : isFocused\n    ? colors.primary\n    : colors.neutral20,\n  borderRadius: borderRadius,\n  borderStyle: 'solid',\n  borderWidth: 1,\n  boxShadow: isFocused ? `0 0 0 1px ${colors.primary}` : undefined,\n  cursor: 'default',\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  minHeight: spacing.controlHeight,\n  outline: '0 !important',\n  position: 'relative',\n  transition: 'all 100ms',\n\n  '&:hover': {\n    borderColor: isFocused ? colors.primary : colors.neutral30,\n  },\n});\n\nconst Control = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: ControlProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    cx,\n    getStyles,\n    className,\n    isDisabled,\n    isFocused,\n    innerRef,\n    innerProps,\n    menuIsOpen,\n  } = props;\n  return (\n    <div\n      ref={innerRef}\n      css={getStyles('control', props)}\n      className={cx(\n        {\n          control: true,\n          'control--is-disabled': isDisabled,\n          'control--is-focused': isFocused,\n          'control--menu-is-open': menuIsOpen,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Control;\n","/** @jsx jsx */\nimport { InputHTMLAttributes } from 'react';\nimport { jsx } from '@emotion/react';\n\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\nimport { cleanCommonProps } from '../utils';\n\nexport interface InputSpecificProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends InputHTMLAttributes<HTMLInputElement>,\n    CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Reference to the internal element */\n  innerRef?: (instance: HTMLInputElement | null) => void;\n  /** Set whether the input should be visible. Does not affect input size. */\n  isHidden: boolean;\n  /** Whether the input is disabled */\n  isDisabled?: boolean;\n  /** The ID of the form that the input belongs to */\n  form?: string;\n  /** Set className for the input element */\n  inputClassName?: string;\n}\n\nexport type InputProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> = InputSpecificProps<Option, IsMulti, Group>;\n\nexport const inputCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  theme: { spacing, colors },\n}: InputProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  margin: spacing.baseUnit / 2,\n  paddingBottom: spacing.baseUnit / 2,\n  paddingTop: spacing.baseUnit / 2,\n  visibility: isDisabled ? 'hidden' : 'visible',\n  color: colors.neutral80,\n  ...containerStyle,\n});\n\nconst spacingStyle = {\n  gridArea: '1 / 2',\n  font: 'inherit',\n  minWidth: '2px',\n  border: 0,\n  margin: 0,\n  outline: 0,\n  padding: 0,\n} as const;\n\nconst containerStyle = {\n  flex: '1 1 auto',\n  display: 'inline-grid',\n  gridTemplateColumns: '0 min-content',\n\n  '&:after': {\n    content: 'attr(data-value) \" \"',\n    visibility: 'hidden',\n    whiteSpace: 'nowrap',\n    ...spacingStyle,\n  },\n} as const;\n\nconst inputStyle = (isHidden: boolean) => ({\n  label: 'input',\n  color: 'inherit',\n  background: 0,\n  opacity: isHidden ? 0 : 1,\n  width: '100%',\n  ...spacingStyle,\n});\n\nconst Input = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: InputProps<Option, IsMulti, Group>\n) => {\n  const { className, cx, getStyles, value } = props;\n  const { innerRef, isDisabled, isHidden, inputClassName, ...innerProps } =\n    cleanCommonProps(props);\n\n  return (\n    <div\n      className={cx({ 'input-container': true }, className)}\n      css={getStyles('input', props)}\n      data-value={value || ''}\n    >\n      <input\n        className={cx({ input: true }, inputClassName)}\n        ref={innerRef}\n        style={inputStyle(isHidden)}\n        disabled={isDisabled}\n        {...innerProps}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","/** @jsx jsx */\nimport { ComponentType, ReactNode } from 'react';\nimport { jsx, ClassNames } from '@emotion/react';\nimport { CrossIcon } from './indicators';\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\nimport { Props } from '../Select';\n\ninterface MultiValueComponents<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  Container: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;\n  Label: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;\n  Remove: ComponentType<MultiValueRemoveProps<Option, IsMulti, Group>>;\n}\n\nexport interface MultiValueProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  children: ReactNode;\n  components: MultiValueComponents<Option, IsMulti, Group>;\n  cropWithEllipsis?: boolean;\n  data: Option;\n  innerProps: JSX.IntrinsicElements['div'];\n  isFocused: boolean;\n  isDisabled: boolean;\n  removeProps: JSX.IntrinsicElements['div'];\n}\n\nexport const multiValueCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing, borderRadius, colors },\n}: MultiValueProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'multiValue',\n  backgroundColor: colors.neutral10,\n  borderRadius: borderRadius / 2,\n  display: 'flex',\n  margin: spacing.baseUnit / 2,\n  minWidth: 0, // resolves flex/text-overflow bug\n});\n\nexport const multiValueLabelCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { borderRadius, colors },\n  cropWithEllipsis,\n}: MultiValueProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  borderRadius: borderRadius / 2,\n  color: colors.neutral80,\n  fontSize: '85%',\n  overflow: 'hidden',\n  padding: 3,\n  paddingLeft: 6,\n  textOverflow:\n    cropWithEllipsis || cropWithEllipsis === undefined ? 'ellipsis' : undefined,\n  whiteSpace: 'nowrap',\n});\n\nexport const multiValueRemoveCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing, borderRadius, colors },\n  isFocused,\n}: MultiValueProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  alignItems: 'center',\n  borderRadius: borderRadius / 2,\n  backgroundColor: isFocused ? colors.dangerLight : undefined,\n  display: 'flex',\n  paddingLeft: spacing.baseUnit,\n  paddingRight: spacing.baseUnit,\n  ':hover': {\n    backgroundColor: colors.dangerLight,\n    color: colors.danger,\n  },\n});\n\nexport interface MultiValueGenericProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> {\n  children: ReactNode;\n  data: any;\n  innerProps: { className?: string };\n  selectProps: Props<Option, IsMulti, Group>;\n}\nexport const MultiValueGeneric = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  children,\n  innerProps,\n}: MultiValueGenericProps<Option, IsMulti, Group>) => (\n  <div {...innerProps}>{children}</div>\n);\n\nexport const MultiValueContainer = MultiValueGeneric;\nexport const MultiValueLabel = MultiValueGeneric;\nexport interface MultiValueRemoveProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> {\n  children?: ReactNode;\n  data: Option;\n  innerProps: JSX.IntrinsicElements['div'];\n  selectProps: Props<Option, IsMulti, Group>;\n}\nexport function MultiValueRemove<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({ children, innerProps }: MultiValueRemoveProps<Option, IsMulti, Group>) {\n  return (\n    <div role=\"button\" {...innerProps}>\n      {children || <CrossIcon size={14} />}\n    </div>\n  );\n}\n\nconst MultiValue = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: MultiValueProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    className,\n    components,\n    cx,\n    data,\n    getStyles,\n    innerProps,\n    isDisabled,\n    removeProps,\n    selectProps,\n  } = props;\n\n  const { Container, Label, Remove } = components;\n\n  return (\n    <ClassNames>\n      {({ css, cx: emotionCx }) => (\n        <Container\n          data={data}\n          innerProps={{\n            className: emotionCx(\n              css(getStyles('multiValue', props)),\n              cx(\n                {\n                  'multi-value': true,\n                  'multi-value--is-disabled': isDisabled,\n                },\n                className\n              )\n            ),\n            ...innerProps,\n          }}\n          selectProps={selectProps}\n        >\n          <Label\n            data={data}\n            innerProps={{\n              className: emotionCx(\n                css(getStyles('multiValueLabel', props)),\n                cx(\n                  {\n                    'multi-value__label': true,\n                  },\n                  className\n                )\n              ),\n            }}\n            selectProps={selectProps}\n          >\n            {children}\n          </Label>\n          <Remove\n            data={data}\n            innerProps={{\n              className: emotionCx(\n                css(getStyles('multiValueRemove', props)),\n                cx(\n                  {\n                    'multi-value__remove': true,\n                  },\n                  className\n                )\n              ),\n              'aria-label': `Remove ${children || 'option'}`,\n              ...removeProps,\n            }}\n            selectProps={selectProps}\n          />\n        </Container>\n      )}\n    </ClassNames>\n  );\n};\n\nexport default MultiValue;\n","import { ComponentType } from 'react';\nimport {\n  ContainerProps,\n  IndicatorsContainer,\n  IndicatorsContainerProps,\n  SelectContainer,\n  ValueContainer,\n  ValueContainerProps,\n} from './containers';\nimport {\n  ClearIndicator,\n  ClearIndicatorProps,\n  CrossIcon,\n  CrossIconProps,\n  DownChevron,\n  DownChevronProps,\n  DropdownIndicator,\n  DropdownIndicatorProps,\n  IndicatorSeparator,\n  IndicatorSeparatorProps,\n  LoadingIndicator,\n  LoadingIndicatorProps,\n} from './indicators';\n\nimport Control, { ControlProps } from './Control';\nimport Group, { GroupHeading, GroupHeadingProps, GroupProps } from './Group';\nimport Input, { InputProps } from './Input';\nimport Menu, {\n  LoadingMessage,\n  MenuList,\n  MenuListProps,\n  MenuPortal,\n  MenuPortalProps,\n  MenuProps,\n  NoOptionsMessage,\n  NoticeProps,\n} from './Menu';\nimport MultiValue, {\n  MultiValueContainer,\n  MultiValueGenericProps,\n  MultiValueLabel,\n  MultiValueProps,\n  MultiValueRemove,\n  MultiValueRemoveProps,\n} from './MultiValue';\nimport Option, { OptionProps } from './Option';\nimport Placeholder, { PlaceholderProps } from './Placeholder';\nimport SingleValue, { SingleValueProps } from './SingleValue';\nimport { GroupBase, OptionBase } from '../types';\n\nexport interface SelectComponents<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  ClearIndicator: ComponentType<ClearIndicatorProps<Option, IsMulti, Group>>;\n  Control: ComponentType<ControlProps<Option, IsMulti, Group>>;\n  DropdownIndicator: ComponentType<\n    DropdownIndicatorProps<Option, IsMulti, Group>\n  > | null;\n  DownChevron: ComponentType<DownChevronProps>;\n  CrossIcon: ComponentType<CrossIconProps>;\n  Group: ComponentType<GroupProps<Option, IsMulti, Group>>;\n  GroupHeading: ComponentType<GroupHeadingProps<Option, IsMulti, Group>>;\n  IndicatorsContainer: ComponentType<\n    IndicatorsContainerProps<Option, IsMulti, Group>\n  >;\n  IndicatorSeparator: ComponentType<\n    IndicatorSeparatorProps<Option, IsMulti, Group>\n  > | null;\n  Input: ComponentType<InputProps<Option, IsMulti, Group>>;\n  LoadingIndicator: ComponentType<\n    LoadingIndicatorProps<Option, IsMulti, Group>\n  >;\n  Menu: ComponentType<MenuProps<Option, IsMulti, Group>>;\n  MenuList: ComponentType<MenuListProps<Option, IsMulti, Group>>;\n  MenuPortal: ComponentType<MenuPortalProps<Option, IsMulti, Group>>;\n  LoadingMessage: ComponentType<NoticeProps<Option, IsMulti, Group>>;\n  NoOptionsMessage: ComponentType<NoticeProps<Option, IsMulti, Group>>;\n  MultiValue: ComponentType<MultiValueProps<Option, IsMulti, Group>>;\n  MultiValueContainer: ComponentType<\n    MultiValueGenericProps<Option, IsMulti, Group>\n  >;\n  MultiValueLabel: ComponentType<\n    MultiValueGenericProps<Option, IsMulti, Group>\n  >;\n  MultiValueRemove: ComponentType<\n    MultiValueRemoveProps<Option, IsMulti, Group>\n  >;\n  Option: ComponentType<OptionProps<Option, IsMulti, Group>>;\n  Placeholder: ComponentType<PlaceholderProps<Option, IsMulti, Group>>;\n  SelectContainer: ComponentType<ContainerProps<Option, IsMulti, Group>>;\n  SingleValue: ComponentType<SingleValueProps<Option, IsMulti, Group>>;\n  ValueContainer: ComponentType<ValueContainerProps<Option, IsMulti, Group>>;\n}\n\nexport type SelectComponentsConfig<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> = Partial<SelectComponents<Option, IsMulti, Group>>;\n\nexport const components = {\n  ClearIndicator: ClearIndicator,\n  Control: Control,\n  DropdownIndicator: DropdownIndicator,\n  DownChevron: DownChevron,\n  CrossIcon: CrossIcon,\n  Group: Group,\n  GroupHeading: GroupHeading,\n  IndicatorsContainer: IndicatorsContainer,\n  IndicatorSeparator: IndicatorSeparator,\n  Input: Input,\n  LoadingIndicator: LoadingIndicator,\n  Menu: Menu,\n  MenuList: MenuList,\n  MenuPortal: MenuPortal,\n  LoadingMessage: LoadingMessage,\n  NoOptionsMessage: NoOptionsMessage,\n  MultiValue: MultiValue,\n  MultiValueContainer: MultiValueContainer,\n  MultiValueLabel: MultiValueLabel,\n  MultiValueRemove: MultiValueRemove,\n  Option: Option,\n  Placeholder: Placeholder,\n  SelectContainer: SelectContainer,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer,\n};\n\nexport type SelectComponentsGeneric = typeof components;\n\ninterface Props<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  components: SelectComponentsConfig<Option, IsMulti, Group>;\n}\n\nexport const defaultComponents = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>\n): SelectComponentsGeneric =>\n  ({\n    ...components,\n    ...props.components,\n  } as SelectComponentsGeneric);\n","/** @jsx jsx */\nimport { ComponentType, ReactNode } from 'react';\nimport { jsx } from '@emotion/react';\nimport { cleanCommonProps } from '../utils';\n\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  CX,\n  GetStyles,\n  GroupBase,\n  OptionBase,\n  Options,\n  Theme,\n} from '../types';\nimport { Props } from '../Select';\n\nexport interface ForwardedHeadingProps<\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n> {\n  id: string;\n  data: Group;\n}\n\nexport interface GroupProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Component to wrap the label, receives headingProps. */\n  Heading: ComponentType<GroupHeadingProps<Option, IsMulti, Group>>;\n  /** Props to pass to Heading. */\n  headingProps: ForwardedHeadingProps<Option, Group>;\n  /** Props to be passed to the group element. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** Label to be displayed in the heading component. */\n  label: ReactNode;\n  /** The data of the group. */\n  data: Group;\n  options: Options<Option>;\n}\n\nexport const groupCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing },\n}: GroupProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  paddingBottom: spacing.baseUnit * 2,\n  paddingTop: spacing.baseUnit * 2,\n});\n\nconst Group = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: GroupProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    className,\n    cx,\n    getStyles,\n    Heading,\n    headingProps,\n    innerProps,\n    label,\n    theme,\n    selectProps,\n  } = props;\n  return (\n    <div\n      css={getStyles('group', props)}\n      className={cx({ group: true }, className)}\n      {...innerProps}\n    >\n      <Heading\n        {...headingProps}\n        selectProps={selectProps}\n        theme={theme}\n        getStyles={getStyles}\n        cx={cx}\n      >\n        {label}\n      </Heading>\n      <div>{children}</div>\n    </div>\n  );\n};\n\ninterface GroupHeadingPropsDefinedProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> extends ForwardedHeadingProps<Option, Group> {\n  className?: string | undefined;\n  selectProps: Props<Option, IsMulti, Group>;\n  theme: Theme;\n  getStyles: GetStyles<Option, IsMulti, Group>;\n  cx: CX;\n}\n\nexport type GroupHeadingProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> = GroupHeadingPropsDefinedProps<Option, IsMulti, Group> &\n  JSX.IntrinsicElements['div'];\n\nexport const groupHeadingCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing },\n}: GroupHeadingProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'group',\n  color: '#999',\n  cursor: 'default',\n  display: 'block',\n  fontSize: '75%',\n  fontWeight: 500,\n  marginBottom: '0.25em',\n  paddingLeft: spacing.baseUnit * 3,\n  paddingRight: spacing.baseUnit * 3,\n  textTransform: 'uppercase',\n});\n\nexport const GroupHeading = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: GroupHeadingProps<Option, IsMulti, Group>\n) => {\n  const { getStyles, cx, className } = props;\n  const { data, ...innerProps } = cleanCommonProps(props);\n  return (\n    <div\n      css={getStyles('groupHeading', props)}\n      className={cx({ 'group-heading': true }, className)}\n      {...innerProps}\n    />\n  );\n};\n\nexport default Group;\n","/** @jsx jsx */\nimport { ReactNode } from 'react';\nimport { jsx } from '@emotion/react';\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\n// ==============================\n// Root Container\n// ==============================\n\nexport interface ContainerProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Whether the select is disabled. */\n  isDisabled: boolean;\n  isFocused: boolean;\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Inner props to be passed down to the container. */\n  innerProps: JSX.IntrinsicElements['div'];\n}\nexport const containerCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  isRtl,\n}: ContainerProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'container',\n  direction: isRtl ? 'rtl' : undefined,\n  pointerEvents: isDisabled ? 'none' : undefined, // cancel mouse events when disabled\n  position: 'relative',\n});\nexport const SelectContainer = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: ContainerProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps, isDisabled, isRtl } =\n    props;\n  return (\n    <div\n      css={getStyles('container', props)}\n      className={cx(\n        {\n          '--is-disabled': isDisabled,\n          '--is-rtl': isRtl,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\n// ==============================\n// Value Container\n// ==============================\n\nexport interface ValueContainerProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** Props to be passed to the value container element. */\n  innerProps?: JSX.IntrinsicElements['div'];\n  /** The children to be rendered. */\n  children: ReactNode;\n  isDisabled: boolean;\n}\nexport const valueContainerCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing },\n}: ValueContainerProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  alignItems: 'center',\n  display: 'flex',\n  flex: 1,\n  flexWrap: 'wrap',\n  padding: `${spacing.baseUnit / 2}px ${spacing.baseUnit * 2}px`,\n  WebkitOverflowScrolling: 'touch',\n  position: 'relative',\n  overflow: 'hidden',\n});\nexport const ValueContainer = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: ValueContainerProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, innerProps, isMulti, getStyles, hasValue } =\n    props;\n\n  return (\n    <div\n      css={getStyles('valueContainer', props)}\n      className={cx(\n        {\n          'value-container': true,\n          'value-container--is-multi': isMulti,\n          'value-container--has-value': hasValue,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\n// ==============================\n// Indicator Container\n// ==============================\n\nexport interface IndicatorsContainerProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  isDisabled: boolean;\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Props to be passed to the indicators container element. */\n  innerProps?: {};\n}\n\nexport const indicatorsContainerCSS = (): CSSObjectWithLabel => ({\n  alignItems: 'center',\n  alignSelf: 'stretch',\n  display: 'flex',\n  flexShrink: 0,\n});\nexport const IndicatorsContainer = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: IndicatorsContainerProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, innerProps, getStyles } = props;\n\n  return (\n    <div\n      css={getStyles('indicatorsContainer', props)}\n      className={cx(\n        {\n          indicators: true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { ReactNode, RefCallback } from 'react';\nimport { jsx } from '@emotion/react';\n\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\nexport interface OptionProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** Inner ref to DOM Node */\n  innerRef: RefCallback<HTMLDivElement>;\n  /** props passed to the wrapping element for the group. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** Text to be displayed representing the option. */\n  label: string;\n  /** Type is used by the menu to determine whether this is an option or a group.\n    In the case of option this is always `option`. **/\n  type: 'option';\n  /** The data of the selected option. */\n  data: Option;\n  /** Whether the option is disabled. */\n  isDisabled: boolean;\n  /** Whether the option is focused. */\n  isFocused: boolean;\n  /** Whether the option is selected. */\n  isSelected: boolean;\n}\n\nexport const optionCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  isFocused,\n  isSelected,\n  theme: { spacing, colors },\n}: OptionProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'option',\n  backgroundColor: isSelected\n    ? colors.primary\n    : isFocused\n    ? colors.primary25\n    : 'transparent',\n  color: isDisabled\n    ? colors.neutral20\n    : isSelected\n    ? colors.neutral0\n    : 'inherit',\n  cursor: 'default',\n  display: 'block',\n  fontSize: 'inherit',\n  padding: `${spacing.baseUnit * 2}px ${spacing.baseUnit * 3}px`,\n  width: '100%',\n  userSelect: 'none',\n  WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',\n\n  // provide some affordance on touch devices\n  ':active': {\n    backgroundColor: !isDisabled\n      ? isSelected\n        ? colors.primary\n        : colors.primary50\n      : undefined,\n  },\n});\n\nconst Option = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: OptionProps<Option, IsMulti, Group>\n) => {\n  const {\n    children,\n    className,\n    cx,\n    getStyles,\n    isDisabled,\n    isFocused,\n    isSelected,\n    innerRef,\n    innerProps,\n  } = props;\n  return (\n    <div\n      css={getStyles('option', props)}\n      className={cx(\n        {\n          option: true,\n          'option--is-disabled': isDisabled,\n          'option--is-focused': isFocused,\n          'option--is-selected': isSelected,\n        },\n        className\n      )}\n      ref={innerRef}\n      aria-disabled={isDisabled}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Option;\n","/** @jsx jsx */\nimport { ReactNode } from 'react';\nimport { jsx } from '@emotion/react';\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\nexport interface PlaceholderProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** props passed to the wrapping element for the group. */\n  innerProps: JSX.IntrinsicElements['div'];\n  isDisabled: boolean;\n  isFocused: boolean;\n}\n\nexport const placeholderCSS = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  theme: { spacing, colors },\n}: PlaceholderProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'placeholder',\n  color: colors.neutral50,\n  marginLeft: spacing.baseUnit / 2,\n  marginRight: spacing.baseUnit / 2,\n  position: 'absolute',\n  top: '50%',\n  transform: 'translateY(-50%)',\n});\n\nconst Placeholder = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: PlaceholderProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, innerProps } = props;\n  return (\n    <div\n      css={getStyles('placeholder', props)}\n      className={cx(\n        {\n          placeholder: true,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Placeholder;\n","/** @jsx jsx */\nimport { ReactNode } from 'react';\nimport { jsx } from '@emotion/react';\nimport {\n  CommonPropsAndClassName,\n  CSSObjectWithLabel,\n  GroupBase,\n  OptionBase,\n} from '../types';\n\nexport interface SingleValueProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends CommonPropsAndClassName<Option, IsMulti, Group> {\n  /** The children to be rendered. */\n  children: ReactNode;\n  /** The data of the selected option rendered in the Single Value component. */\n  data: Option;\n  /** Props passed to the wrapping element for the group. */\n  innerProps: JSX.IntrinsicElements['div'];\n  /** Whether this is disabled. */\n  isDisabled: boolean;\n}\n\nexport const css = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>({\n  isDisabled,\n  theme: { spacing, colors },\n}: SingleValueProps<Option, IsMulti, Group>): CSSObjectWithLabel => ({\n  label: 'singleValue',\n  color: isDisabled ? colors.neutral40 : colors.neutral80,\n  marginLeft: spacing.baseUnit / 2,\n  marginRight: spacing.baseUnit / 2,\n  maxWidth: `calc(100% - ${spacing.baseUnit * 2}px)`,\n  overflow: 'hidden',\n  position: 'absolute',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap',\n  top: '50%',\n  transform: 'translateY(-50%)',\n});\n\nconst SingleValue = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: SingleValueProps<Option, IsMulti, Group>\n) => {\n  const { children, className, cx, getStyles, isDisabled, innerProps } = props;\n  return (\n    <div\n      css={getStyles('singleValue', props)}\n      className={cx(\n        {\n          'single-value': true,\n          'single-value--is-disabled': isDisabled,\n        },\n        className\n      )}\n      {...innerProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default SingleValue;\n","import {\n  containerCSS,\n  ContainerProps,\n  indicatorsContainerCSS,\n  IndicatorsContainerProps,\n  valueContainerCSS,\n  ValueContainerProps,\n} from './components/containers';\nimport { ControlProps, css as controlCSS } from './components/Control';\nimport {\n  groupCSS,\n  groupHeadingCSS,\n  GroupHeadingProps,\n  GroupProps,\n} from './components/Group';\nimport {\n  clearIndicatorCSS,\n  dropdownIndicatorCSS,\n  loadingIndicatorCSS,\n  indicatorSeparatorCSS,\n  ClearIndicatorProps,\n  DropdownIndicatorProps,\n  IndicatorSeparatorProps,\n  LoadingIndicatorProps,\n} from './components/indicators';\nimport { inputCSS, InputProps } from './components/Input';\nimport { placeholderCSS, PlaceholderProps } from './components/Placeholder';\nimport { optionCSS, OptionProps } from './components/Option';\nimport {\n  menuCSS,\n  menuListCSS,\n  menuPortalCSS,\n  noOptionsMessageCSS,\n  loadingMessageCSS,\n  NoticeProps,\n  MenuProps,\n  MenuListProps,\n  PortalStyleArgs,\n} from './components/Menu';\nimport {\n  css as singleValueCSS,\n  SingleValueProps,\n} from './components/SingleValue';\nimport {\n  multiValueCSS,\n  multiValueLabelCSS,\n  MultiValueProps,\n  multiValueRemoveCSS,\n} from './components/MultiValue';\nimport { CSSObjectWithLabel, GroupBase, OptionBase } from './types';\n\nexport interface StylesProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  clearIndicator: ClearIndicatorProps<Option, IsMulti, Group>;\n  container: ContainerProps<Option, IsMulti, Group>;\n  control: ControlProps<Option, IsMulti, Group>;\n  dropdownIndicator: DropdownIndicatorProps<Option, IsMulti, Group>;\n  group: GroupProps<Option, IsMulti, Group>;\n  groupHeading: GroupHeadingProps<Option, IsMulti, Group>;\n  indicatorsContainer: IndicatorsContainerProps<Option, IsMulti, Group>;\n  indicatorSeparator: IndicatorSeparatorProps<Option, IsMulti, Group>;\n  input: InputProps<Option, IsMulti, Group>;\n  loadingIndicator: LoadingIndicatorProps<Option, IsMulti, Group>;\n  loadingMessage: NoticeProps<Option, IsMulti, Group>;\n  menu: MenuProps<Option, IsMulti, Group>;\n  menuList: MenuListProps<Option, IsMulti, Group>;\n  menuPortal: PortalStyleArgs;\n  multiValue: MultiValueProps<Option, IsMulti, Group>;\n  multiValueLabel: MultiValueProps<Option, IsMulti, Group>;\n  multiValueRemove: MultiValueProps<Option, IsMulti, Group>;\n  noOptionsMessage: NoticeProps<Option, IsMulti, Group>;\n  option: OptionProps<Option, IsMulti, Group>;\n  placeholder: PlaceholderProps<Option, IsMulti, Group>;\n  singleValue: SingleValueProps<Option, IsMulti, Group>;\n  valueContainer: ValueContainerProps<Option, IsMulti, Group>;\n}\n\ntype StylesFunction<Props> = (props: Props) => CSSObjectWithLabel;\nexport type StylesFunctions<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> = {\n  [K in keyof StylesProps<Option, IsMulti, Group>]: StylesFunction<\n    StylesProps<Option, IsMulti, Group>[K]\n  >;\n};\n\nexport type StylesConfigFunction<Props> = (\n  base: CSSObjectWithLabel,\n  props: Props\n) => CSSObjectWithLabel;\nexport type StylesConfig<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> = {\n  [K in keyof StylesProps<Option, IsMulti, Group>]?: StylesConfigFunction<\n    StylesProps<Option, IsMulti, Group>[K]\n  >;\n};\n\nexport const defaultStyles: StylesFunctions<\n  OptionBase,\n  boolean,\n  GroupBase<OptionBase>\n> = {\n  clearIndicator: clearIndicatorCSS,\n  container: containerCSS,\n  control: controlCSS,\n  dropdownIndicator: dropdownIndicatorCSS,\n  group: groupCSS,\n  groupHeading: groupHeadingCSS,\n  indicatorsContainer: indicatorsContainerCSS,\n  indicatorSeparator: indicatorSeparatorCSS,\n  input: inputCSS,\n  loadingIndicator: loadingIndicatorCSS,\n  loadingMessage: loadingMessageCSS,\n  menu: menuCSS,\n  menuList: menuListCSS,\n  menuPortal: menuPortalCSS,\n  multiValue: multiValueCSS,\n  multiValueLabel: multiValueLabelCSS,\n  multiValueRemove: multiValueRemoveCSS,\n  noOptionsMessage: noOptionsMessageCSS,\n  option: optionCSS,\n  placeholder: placeholderCSS,\n  singleValue: singleValueCSS,\n  valueContainer: valueContainerCSS,\n};\n\n// Merge Utility\n// Allows consumers to extend a base Select with additional styles\n\nexport function mergeStyles<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  source: StylesConfig<Option, IsMulti, Group>,\n  target: StylesConfig<Option, IsMulti, Group> = {}\n) {\n  // initialize with source styles\n  const styles = { ...source };\n\n  // massage in target styles\n  Object.keys(target).forEach((keyAsString) => {\n    const key = keyAsString as keyof StylesConfig<Option, IsMulti, Group>;\n    if (source[key]) {\n      styles[key] = (rsCss: any, props: any) => {\n        return target[key]!(source[key]!(rsCss, props), props);\n      };\n    } else {\n      styles[key] = target[key] as any;\n    }\n  });\n\n  return styles;\n}\n","import { Theme } from './types';\n\nexport const colors = {\n  primary: '#2684FF',\n  primary75: '#4C9AFF',\n  primary50: '#B2D4FF',\n  primary25: '#DEEBFF',\n\n  danger: '#DE350B',\n  dangerLight: '#FFBDAD',\n\n  neutral0: 'hsl(0, 0%, 100%)',\n  neutral5: 'hsl(0, 0%, 95%)',\n  neutral10: 'hsl(0, 0%, 90%)',\n  neutral20: 'hsl(0, 0%, 80%)',\n  neutral30: 'hsl(0, 0%, 70%)',\n  neutral40: 'hsl(0, 0%, 60%)',\n  neutral50: 'hsl(0, 0%, 50%)',\n  neutral60: 'hsl(0, 0%, 40%)',\n  neutral70: 'hsl(0, 0%, 30%)',\n  neutral80: 'hsl(0, 0%, 20%)',\n  neutral90: 'hsl(0, 0%, 10%)',\n};\n\nconst borderRadius = 4;\n// Used to calculate consistent margin/padding on elements\nconst baseUnit = 4;\n// The minimum height of the control\nconst controlHeight = 38;\n// The amount of space between the control and menu */\nconst menuGutter = baseUnit * 2;\n\nexport const spacing = {\n  baseUnit,\n  controlHeight,\n  menuGutter,\n};\n\nexport const defaultTheme: Theme = {\n  borderRadius,\n  colors,\n  spacing,\n};\n\nexport type ThemeConfig = Theme | ((theme: Theme) => Theme);\n","import React, {\n  Component,\n  FocusEventHandler,\n  FormEventHandler,\n  KeyboardEventHandler,\n  MouseEventHandler,\n  ReactNode,\n  RefCallback,\n  TouchEventHandler,\n} from 'react';\nimport { MenuPlacer } from './components/Menu';\nimport LiveRegion from './components/LiveRegion';\n\nimport { createFilter, FilterOptionOption } from './filters';\nimport { DummyInput, ScrollManager } from './internal/index';\nimport {\n  AriaLive,\n  AriaLiveMessages,\n  AriaSelection,\n} from './accessibility/index';\n\nimport {\n  classNames,\n  cleanValue,\n  isTouchCapable,\n  isMobileDevice,\n  noop,\n  scrollIntoView,\n  isDocumentElement,\n  notNullish,\n  valueTernary,\n  multiValueAsValue,\n  singleValueAsValue,\n} from './utils';\n\nimport {\n  formatGroupLabel as formatGroupLabelBuiltin,\n  getOptionLabel as getOptionLabelBuiltin,\n  getOptionValue as getOptionValueBuiltin,\n  isOptionDisabled as isOptionDisabledBuiltin,\n} from './builtins';\n\nimport { defaultComponents, SelectComponentsConfig } from './components/index';\n\nimport { defaultStyles, StylesConfig, StylesProps } from './styles';\nimport { defaultTheme, ThemeConfig } from './theme';\n\nimport {\n  ActionMeta,\n  FocusDirection,\n  GetOptionLabel,\n  GetOptionValue,\n  GroupBase,\n  InputActionMeta,\n  MenuPlacement,\n  MenuPosition,\n  OnChangeValue,\n  OptionBase,\n  Options,\n  OptionsOrGroups,\n  PropsValue,\n  SetValueAction,\n} from './types';\n\nexport type FormatOptionLabelContext = 'menu' | 'value';\nexport interface FormatOptionLabelMeta<Option extends OptionBase> {\n  context: FormatOptionLabelContext;\n  inputValue: string;\n  selectValue: Options<Option>;\n}\n\nexport interface Props<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  /** HTML ID of an element containing an error message related to the input**/\n  'aria-errormessage'?: string;\n  /** Indicate if the value entered in the field is invalid **/\n  'aria-invalid'?: boolean;\n  /** Aria label (for assistive tech) */\n  'aria-label'?: string;\n  /** HTML ID of an element that should be used as the label (for assistive tech) */\n  'aria-labelledby'?: string;\n  /** Used to set the priority with which screen reader should treat updates to live regions. The possible settings are: off, polite (default) or assertive */\n  'aria-live'?: AriaLive;\n  /** Customize the messages used by the aria-live component */\n  ariaLiveMessages?: AriaLiveMessages<Option, IsMulti, Group>;\n  /** Focus the control when it is mounted */\n  autoFocus?: boolean;\n  /** Remove the currently focused option when the user presses backspace when Select isClearable or isMulti */\n  backspaceRemovesValue: boolean;\n  /** Remove focus from the input when the user selects an option (handy for dismissing the keyboard on touch devices) */\n  blurInputOnSelect: boolean;\n  /** When the user reaches the top/bottom of the menu, prevent scroll on the scroll-parent  */\n  captureMenuScroll: boolean;\n  /** Sets a className attribute on the outer component */\n  className?: string;\n  /**\n   * If provided, all inner components will be given a prefixed className attribute.\n   *\n   * This is useful when styling via CSS classes instead of the Styles API approach.\n   */\n  classNamePrefix?: string | null;\n  /** Close the select menu when the user selects an option */\n  closeMenuOnSelect: boolean;\n  /**\n   * If `true`, close the select menu when the user scrolls the document/body.\n   *\n   * If a function, takes a standard javascript `ScrollEvent` you return a boolean:\n   *\n   * `true` => The menu closes\n   *\n   * `false` => The menu stays open\n   *\n   * This is useful when you have a scrollable modal and want to portal the menu out,\n   * but want to avoid graphical issues.\n   */\n  closeMenuOnScroll: boolean | ((event: Event) => boolean);\n  /**\n   * This complex object includes all the compositional components that are used\n   * in `react-select`. If you wish to overwrite a component, pass in an object\n   * with the appropriate namespace.\n   *\n   * If you only wish to restyle a component, we recommend using the `styles` prop\n   * instead. For a list of the components that can be passed in, and the shape\n   * that will be passed to them, see [the components docs](/components)\n   */\n  components: SelectComponentsConfig<Option, IsMulti, Group>;\n  /** Whether the value of the select, e.g. SingleValue, should be displayed in the control. */\n  controlShouldRenderValue: boolean;\n  /** Delimiter used to join multiple values into a single HTML Input value */\n  delimiter?: string;\n  /** Clear all values when the user presses escape AND the menu is closed */\n  escapeClearsValue: boolean;\n  /** Custom method to filter whether an option should be displayed in the menu */\n  filterOption:\n    | ((option: FilterOptionOption<Option>, inputValue: string) => boolean)\n    | null;\n  /**\n   * Formats group labels in the menu as React components\n   *\n   * An example can be found in the [Replacing builtins](/advanced#replacing-builtins) documentation.\n   */\n  formatGroupLabel: (group: Group) => ReactNode;\n  /** Formats option labels in the menu and control as React components */\n  formatOptionLabel?: (\n    data: Option,\n    formatOptionLabelMeta: FormatOptionLabelMeta<Option>\n  ) => ReactNode;\n  /**\n   * Resolves option data to a string to be displayed as the label by components\n   *\n   * Note: Failure to resolve to a string type can interfere with filtering and\n   * screen reader support.\n   */\n  getOptionLabel: GetOptionLabel<Option>;\n  /** Resolves option data to a string to compare options and specify value attributes */\n  getOptionValue: GetOptionValue<Option>;\n  /** Hide the selected option from the menu */\n  hideSelectedOptions?: boolean;\n  /** The id to set on the SelectContainer component. */\n  id?: string;\n  /** The value of the search input */\n  inputValue: string;\n  /** The id of the search input */\n  inputId?: string;\n  /** Define an id prefix for the select components e.g. {your-id}-value */\n  instanceId?: number | string;\n  /** Is the select value clearable */\n  isClearable?: boolean;\n  /** Is the select disabled */\n  isDisabled: boolean;\n  /** Is the select in a state of loading (async) */\n  isLoading: boolean;\n  /**\n   * Override the built-in logic to detect whether an option is disabled\n   *\n   * An example can be found in the [Replacing builtins](/advanced#replacing-builtins) documentation.\n   */\n  isOptionDisabled: (option: Option, selectValue: Options<Option>) => boolean;\n  /** Override the built-in logic to detect whether an option is selected */\n  isOptionSelected?: (option: Option, selectValue: Options<Option>) => boolean;\n  /** Support multiple selected options */\n  isMulti: IsMulti;\n  /** Is the select direction right-to-left */\n  isRtl: boolean;\n  /** Whether to enable search functionality */\n  isSearchable: boolean;\n  /** Async: Text to display when loading options */\n  loadingMessage: (obj: { inputValue: string }) => string | null;\n  /** Minimum height of the menu before flipping */\n  minMenuHeight: number;\n  /** Maximum height of the menu before scrolling */\n  maxMenuHeight: number;\n  /** Whether the menu is open */\n  menuIsOpen: boolean;\n  /**\n   * Default placement of the menu in relation to the control. 'auto' will flip\n   * when there isn't enough space below the control.\n   */\n  menuPlacement: MenuPlacement;\n  /** The CSS position value of the menu, when \"fixed\" extra layout management is required */\n  menuPosition: MenuPosition;\n  /**\n   * Whether the menu should use a portal, and where it should attach\n   *\n   * An example can be found in the [Portaling](/advanced#portaling) documentation\n   */\n  menuPortalTarget?: HTMLElement | null;\n  /** Whether to block scroll events when the menu is open */\n  menuShouldBlockScroll: boolean;\n  /** Whether the menu should be scrolled into view when it opens */\n  menuShouldScrollIntoView: boolean;\n  /** Name of the HTML Input (optional - without this, no input will be rendered) */\n  name?: string;\n  /** Text to display when there are no options */\n  noOptionsMessage: (obj: { inputValue: string }) => ReactNode;\n  /** Handle blur events on the control */\n  onBlur?: FocusEventHandler<HTMLInputElement>;\n  /** Handle change events on the select */\n  onChange: (\n    newValue: OnChangeValue<Option, IsMulti>,\n    actionMeta: ActionMeta<Option>\n  ) => void;\n  /** Handle focus events on the control */\n  onFocus?: FocusEventHandler<HTMLInputElement>;\n  /** Handle change events on the input */\n  onInputChange: (newValue: string, actionMeta: InputActionMeta) => void;\n  /** Handle key down events on the select */\n  onKeyDown?: KeyboardEventHandler<HTMLDivElement>;\n  /** Handle the menu opening */\n  onMenuOpen: () => void;\n  /** Handle the menu closing */\n  onMenuClose: () => void;\n  /** Fired when the user scrolls to the top of the menu */\n  onMenuScrollToTop?: (event: WheelEvent | TouchEvent) => void;\n  /** Fired when the user scrolls to the bottom of the menu */\n  onMenuScrollToBottom?: (event: WheelEvent | TouchEvent) => void;\n  /** Allows control of whether the menu is opened when the Select is focused */\n  openMenuOnFocus: boolean;\n  /** Allows control of whether the menu is opened when the Select is clicked */\n  openMenuOnClick: boolean;\n  /** Array of options that populate the select menu */\n  options: OptionsOrGroups<Option, Group>;\n  /** Number of options to jump in menu when page{up|down} keys are used */\n  pageSize: number;\n  /** Placeholder for the select value */\n  placeholder: ReactNode;\n  /** Status to relay to screen readers */\n  screenReaderStatus: (obj: { count: number }) => string;\n  /**\n   * Style modifier methods\n   *\n   * A basic example can be found at the bottom of the [Replacing builtins](/advanced#replacing-builtins) documentation.\n   */\n  styles: StylesConfig<Option, IsMulti, Group>;\n  /** Theme modifier method */\n  theme?: ThemeConfig;\n  /** Sets the tabIndex attribute on the input */\n  tabIndex: number;\n  /** Select the currently focused option when the user presses tab */\n  tabSelectsValue: boolean;\n  /** The value of the select; reflected by the selected option */\n  value: PropsValue<Option>;\n  /** Sets the form attribute on the input */\n  form?: string;\n}\n\nexport const defaultProps = {\n  'aria-live': 'polite',\n  backspaceRemovesValue: true,\n  blurInputOnSelect: isTouchCapable(),\n  captureMenuScroll: !isTouchCapable(),\n  closeMenuOnSelect: true,\n  closeMenuOnScroll: false,\n  components: {},\n  controlShouldRenderValue: true,\n  escapeClearsValue: false,\n  filterOption: createFilter(),\n  formatGroupLabel: formatGroupLabelBuiltin,\n  getOptionLabel: getOptionLabelBuiltin,\n  getOptionValue: getOptionValueBuiltin,\n  isDisabled: false,\n  isLoading: false,\n  isMulti: false,\n  isRtl: false,\n  isSearchable: true,\n  isOptionDisabled: isOptionDisabledBuiltin,\n  loadingMessage: () => 'Loading...',\n  maxMenuHeight: 300,\n  minMenuHeight: 140,\n  menuIsOpen: false,\n  menuPlacement: 'bottom',\n  menuPosition: 'absolute',\n  menuShouldBlockScroll: false,\n  menuShouldScrollIntoView: !isMobileDevice(),\n  noOptionsMessage: () => 'No options',\n  openMenuOnFocus: false,\n  openMenuOnClick: true,\n  options: [],\n  pageSize: 5,\n  placeholder: 'Select...',\n  screenReaderStatus: ({ count }: { count: number }) =>\n    `${count} result${count !== 1 ? 's' : ''} available`,\n  styles: {},\n  tabIndex: 0,\n  tabSelectsValue: true,\n};\n\ninterface State<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> {\n  ariaSelection: AriaSelection<Option, IsMulti> | null;\n  inputIsHidden: boolean;\n  isFocused: boolean;\n  focusedOption: Option | null;\n  focusedValue: Option | null;\n  selectValue: Options<Option>;\n  clearFocusValueOnUpdate: boolean;\n  prevWasFocused: boolean;\n  inputIsHiddenAfterUpdate: boolean | null | undefined;\n  prevProps: Props<Option, IsMulti, Group> | void;\n}\n\ninterface CategorizedOption<Option extends OptionBase> {\n  type: 'option';\n  data: Option;\n  isDisabled: boolean;\n  isSelected: boolean;\n  label: string;\n  value: string;\n  index: number;\n}\n\ninterface CategorizedGroup<\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n> {\n  type: 'group';\n  data: Group;\n  options: readonly CategorizedOption<Option>[];\n  index: number;\n}\n\ntype CategorizedGroupOrOption<\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n> = CategorizedGroup<Option, Group> | CategorizedOption<Option>;\n\nfunction toCategorizedOption<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  option: Option,\n  selectValue: Options<Option>,\n  index: number\n): CategorizedOption<Option> {\n  const isDisabled = isOptionDisabled(props, option, selectValue);\n  const isSelected = isOptionSelected(props, option, selectValue);\n  const label = getOptionLabel(props, option);\n  const value = getOptionValue(props, option);\n\n  return {\n    type: 'option',\n    data: option,\n    isDisabled,\n    isSelected,\n    label,\n    value,\n    index,\n  };\n}\n\nfunction buildCategorizedOptions<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  selectValue: Options<Option>\n): CategorizedGroupOrOption<Option, Group>[] {\n  return props.options\n    .map((groupOrOption, groupOrOptionIndex) => {\n      if ('options' in groupOrOption) {\n        const categorizedOptions = groupOrOption.options\n          .map((option, optionIndex) =>\n            toCategorizedOption(props, option, selectValue, optionIndex)\n          )\n          .filter((categorizedOption) => isFocusable(props, categorizedOption));\n        return categorizedOptions.length > 0\n          ? {\n              type: 'group' as const,\n              data: groupOrOption,\n              options: categorizedOptions,\n              index: groupOrOptionIndex,\n            }\n          : undefined;\n      }\n      const categorizedOption = toCategorizedOption(\n        props,\n        groupOrOption,\n        selectValue,\n        groupOrOptionIndex\n      );\n      return isFocusable(props, categorizedOption)\n        ? categorizedOption\n        : undefined;\n    })\n    .filter(notNullish);\n}\n\nfunction buildFocusableOptionsFromCategorizedOptions<\n  Option extends OptionBase,\n  Group extends GroupBase<Option>\n>(categorizedOptions: readonly CategorizedGroupOrOption<Option, Group>[]) {\n  return categorizedOptions.reduce<Option[]>(\n    (optionsAccumulator, categorizedOption) => {\n      if (categorizedOption.type === 'group') {\n        optionsAccumulator.push(\n          ...categorizedOption.options.map((option) => option.data)\n        );\n      } else {\n        optionsAccumulator.push(categorizedOption.data);\n      }\n      return optionsAccumulator;\n    },\n    []\n  );\n}\n\nfunction buildFocusableOptions<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(props: Props<Option, IsMulti, Group>, selectValue: Options<Option>) {\n  return buildFocusableOptionsFromCategorizedOptions(\n    buildCategorizedOptions(props, selectValue)\n  );\n}\n\nfunction isFocusable<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  categorizedOption: CategorizedOption<Option>\n) {\n  const { inputValue = '' } = props;\n  const { data, isSelected, label, value } = categorizedOption;\n\n  return (\n    (!shouldHideSelectedOptions(props) || !isSelected) &&\n    filterOption(props, { label, value, data }, inputValue)\n  );\n}\n\nfunction getNextFocusedValue<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(state: State<Option, IsMulti, Group>, nextSelectValue: Options<Option>) {\n  const { focusedValue, selectValue: lastSelectValue } = state;\n  const lastFocusedIndex = lastSelectValue.indexOf(focusedValue!);\n  if (lastFocusedIndex > -1) {\n    const nextFocusedIndex = nextSelectValue.indexOf(focusedValue!);\n    if (nextFocusedIndex > -1) {\n      // the focused value is still in the selectValue, return it\n      return focusedValue;\n    } else if (lastFocusedIndex < nextSelectValue.length) {\n      // the focusedValue is not present in the next selectValue array by\n      // reference, so return the new value at the same index\n      return nextSelectValue[lastFocusedIndex];\n    }\n  }\n  return null;\n}\n\nfunction getNextFocusedOption<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(state: State<Option, IsMulti, Group>, options: Options<Option>) {\n  const { focusedOption: lastFocusedOption } = state;\n  return lastFocusedOption && options.indexOf(lastFocusedOption) > -1\n    ? lastFocusedOption\n    : options[0];\n}\nconst getOptionLabel = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  data: Option\n): string => {\n  return props.getOptionLabel(data);\n};\nconst getOptionValue = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  data: Option\n): string => {\n  return props.getOptionValue(data);\n};\n\nfunction isOptionDisabled<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  option: Option,\n  selectValue: Options<Option>\n): boolean {\n  return typeof props.isOptionDisabled === 'function'\n    ? props.isOptionDisabled(option, selectValue)\n    : false;\n}\nfunction isOptionSelected<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  option: Option,\n  selectValue: Options<Option>\n): boolean {\n  if (selectValue.indexOf(option) > -1) return true;\n  if (typeof props.isOptionSelected === 'function') {\n    return props.isOptionSelected(option, selectValue);\n  }\n  const candidate = getOptionValue(props, option);\n  return selectValue.some((i) => getOptionValue(props, i) === candidate);\n}\nfunction filterOption<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>,\n  option: FilterOptionOption<Option>,\n  inputValue: string\n) {\n  return props.filterOption ? props.filterOption(option, inputValue) : true;\n}\n\nconst shouldHideSelectedOptions = <\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n>(\n  props: Props<Option, IsMulti, Group>\n) => {\n  const { hideSelectedOptions, isMulti } = props;\n  if (hideSelectedOptions === undefined) return isMulti;\n  return hideSelectedOptions;\n};\n\nlet instanceId = 1;\n\nexport default class Select<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = false,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> extends Component<\n  Props<Option, IsMulti, Group>,\n  State<Option, IsMulti, Group>\n> {\n  static defaultProps = defaultProps;\n  state: State<Option, IsMulti, Group> = {\n    ariaSelection: null,\n    focusedOption: null,\n    focusedValue: null,\n    inputIsHidden: false,\n    isFocused: false,\n    selectValue: [],\n    clearFocusValueOnUpdate: false,\n    prevWasFocused: false,\n    inputIsHiddenAfterUpdate: undefined,\n    prevProps: undefined,\n  };\n\n  // Misc. Instance Properties\n  // ------------------------------\n\n  blockOptionHover = false;\n  isComposing = false;\n  commonProps: any; // TODO\n  initialTouchX = 0;\n  initialTouchY = 0;\n  instancePrefix = '';\n  openAfterFocus = false;\n  scrollToFocusedOptionOnUpdate = false;\n  userIsDragging?: boolean;\n\n  // Refs\n  // ------------------------------\n\n  controlRef: HTMLDivElement | null = null;\n  getControlRef: RefCallback<HTMLDivElement> = (ref) => {\n    this.controlRef = ref;\n  };\n  focusedOptionRef: HTMLDivElement | null = null;\n  getFocusedOptionRef: RefCallback<HTMLDivElement> = (ref) => {\n    this.focusedOptionRef = ref;\n  };\n  menuListRef: HTMLDivElement | null = null;\n  getMenuListRef: RefCallback<HTMLDivElement> = (ref) => {\n    this.menuListRef = ref;\n  };\n  inputRef: HTMLInputElement | null = null;\n  getInputRef: RefCallback<HTMLInputElement> = (ref) => {\n    this.inputRef = ref;\n  };\n\n  // Lifecycle\n  // ------------------------------\n\n  constructor(props: Props<Option, IsMulti, Group>) {\n    super(props);\n    this.instancePrefix =\n      'react-select-' + (this.props.instanceId || ++instanceId);\n    this.state.selectValue = cleanValue(props.value);\n  }\n\n  static getDerivedStateFromProps(\n    props: Props<OptionBase, boolean, GroupBase<OptionBase>>,\n    state: State<OptionBase, boolean, GroupBase<OptionBase>>\n  ) {\n    const {\n      prevProps,\n      clearFocusValueOnUpdate,\n      inputIsHiddenAfterUpdate,\n      ariaSelection,\n      isFocused,\n      prevWasFocused,\n    } = state;\n    const { options, value, menuIsOpen, inputValue, isMulti } = props;\n    const selectValue = cleanValue(value);\n    let newMenuOptionsState = {};\n    if (\n      prevProps &&\n      (value !== prevProps.value ||\n        options !== prevProps.options ||\n        menuIsOpen !== prevProps.menuIsOpen ||\n        inputValue !== prevProps.inputValue)\n    ) {\n      const focusableOptions = menuIsOpen\n        ? buildFocusableOptions(props, selectValue)\n        : [];\n      const focusedValue = clearFocusValueOnUpdate\n        ? getNextFocusedValue(state, selectValue)\n        : null;\n      const focusedOption = getNextFocusedOption(state, focusableOptions);\n      newMenuOptionsState = {\n        selectValue,\n        focusedOption,\n        focusedValue,\n        clearFocusValueOnUpdate: false,\n      };\n    }\n    // some updates should toggle the state of the input visibility\n    const newInputIsHiddenState =\n      inputIsHiddenAfterUpdate != null && props !== prevProps\n        ? {\n            inputIsHidden: inputIsHiddenAfterUpdate,\n            inputIsHiddenAfterUpdate: undefined,\n          }\n        : {};\n\n    let newAriaSelection = ariaSelection;\n\n    let hasKeptFocus = isFocused && prevWasFocused;\n\n    if (isFocused && !hasKeptFocus) {\n      // If `value` or `defaultValue` props are not empty then announce them\n      // when the Select is initially focused\n      newAriaSelection = {\n        value: valueTernary(isMulti, selectValue, selectValue[0] || null),\n        options: selectValue,\n        action: 'initial-input-focus',\n      };\n\n      hasKeptFocus = !prevWasFocused;\n    }\n\n    // If the 'initial-input-focus' action has been set already\n    // then reset the ariaSelection to null\n    if (ariaSelection?.action === 'initial-input-focus') {\n      newAriaSelection = null;\n    }\n\n    return {\n      ...newMenuOptionsState,\n      ...newInputIsHiddenState,\n      prevProps: props,\n      ariaSelection: newAriaSelection,\n      prevWasFocused: hasKeptFocus,\n    };\n  }\n  componentDidMount() {\n    this.startListeningComposition();\n    this.startListeningToTouch();\n\n    if (this.props.closeMenuOnScroll && document && document.addEventListener) {\n      // Listen to all scroll events, and filter them out inside of 'onScroll'\n      document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    if (this.props.autoFocus) {\n      this.focusInput();\n    }\n  }\n  componentDidUpdate(prevProps: Props<Option, IsMulti, Group>) {\n    const { isDisabled, menuIsOpen } = this.props;\n    const { isFocused } = this.state;\n\n    if (\n      // ensure focus is restored correctly when the control becomes enabled\n      (isFocused && !isDisabled && prevProps.isDisabled) ||\n      // ensure focus is on the Input when the menu opens\n      (isFocused && menuIsOpen && !prevProps.menuIsOpen)\n    ) {\n      this.focusInput();\n    }\n\n    if (isFocused && isDisabled && !prevProps.isDisabled) {\n      // ensure select state gets blurred in case Select is programatically disabled while focused\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ isFocused: false }, this.onMenuClose);\n    }\n\n    // scroll the focused option into view if necessary\n    if (\n      this.menuListRef &&\n      this.focusedOptionRef &&\n      this.scrollToFocusedOptionOnUpdate\n    ) {\n      scrollIntoView(this.menuListRef, this.focusedOptionRef);\n      this.scrollToFocusedOptionOnUpdate = false;\n    }\n  }\n  componentWillUnmount() {\n    this.stopListeningComposition();\n    this.stopListeningToTouch();\n    document.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  // ==============================\n  // Consumer Handlers\n  // ==============================\n\n  onMenuOpen() {\n    this.props.onMenuOpen();\n  }\n  onMenuClose() {\n    this.onInputChange('', { action: 'menu-close' });\n    this.props.onMenuClose();\n  }\n  onInputChange(newValue: string, actionMeta: InputActionMeta) {\n    this.props.onInputChange(newValue, actionMeta);\n  }\n\n  // ==============================\n  // Methods\n  // ==============================\n\n  focusInput() {\n    if (!this.inputRef) return;\n    this.inputRef.focus();\n  }\n  blurInput() {\n    if (!this.inputRef) return;\n    this.inputRef.blur();\n  }\n\n  // aliased for consumers\n  focus = this.focusInput;\n  blur = this.blurInput;\n\n  openMenu(focusOption: 'first' | 'last') {\n    const { selectValue, isFocused } = this.state;\n    const focusableOptions = this.buildFocusableOptions();\n    let openAtIndex = focusOption === 'first' ? 0 : focusableOptions.length - 1;\n\n    if (!this.props.isMulti) {\n      const selectedIndex = focusableOptions.indexOf(selectValue[0]);\n      if (selectedIndex > -1) {\n        openAtIndex = selectedIndex;\n      }\n    }\n\n    // only scroll if the menu isn't already open\n    this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);\n\n    this.setState(\n      {\n        inputIsHiddenAfterUpdate: false,\n        focusedValue: null,\n        focusedOption: focusableOptions[openAtIndex],\n      },\n      () => this.onMenuOpen()\n    );\n  }\n\n  focusValue(direction: 'previous' | 'next') {\n    const { selectValue, focusedValue } = this.state;\n\n    // Only multiselects support value focusing\n    if (!this.props.isMulti) return;\n\n    this.setState({\n      focusedOption: null,\n    });\n\n    let focusedIndex = selectValue.indexOf(focusedValue!);\n    if (!focusedValue) {\n      focusedIndex = -1;\n    }\n\n    const lastIndex = selectValue.length - 1;\n    let nextFocus = -1;\n    if (!selectValue.length) return;\n\n    switch (direction) {\n      case 'previous':\n        if (focusedIndex === 0) {\n          // don't cycle from the start to the end\n          nextFocus = 0;\n        } else if (focusedIndex === -1) {\n          // if nothing is focused, focus the last value first\n          nextFocus = lastIndex;\n        } else {\n          nextFocus = focusedIndex - 1;\n        }\n        break;\n      case 'next':\n        if (focusedIndex > -1 && focusedIndex < lastIndex) {\n          nextFocus = focusedIndex + 1;\n        }\n        break;\n    }\n    this.setState({\n      inputIsHidden: nextFocus !== -1,\n      focusedValue: selectValue[nextFocus],\n    });\n  }\n\n  focusOption(direction: FocusDirection = 'first') {\n    const { pageSize } = this.props;\n    const { focusedOption } = this.state;\n    const options = this.getFocusableOptions();\n\n    if (!options.length) return;\n    let nextFocus = 0; // handles 'first'\n    let focusedIndex = options.indexOf(focusedOption!);\n    if (!focusedOption) {\n      focusedIndex = -1;\n    }\n\n    if (direction === 'up') {\n      nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;\n    } else if (direction === 'down') {\n      nextFocus = (focusedIndex + 1) % options.length;\n    } else if (direction === 'pageup') {\n      nextFocus = focusedIndex - pageSize;\n      if (nextFocus < 0) nextFocus = 0;\n    } else if (direction === 'pagedown') {\n      nextFocus = focusedIndex + pageSize;\n      if (nextFocus > options.length - 1) nextFocus = options.length - 1;\n    } else if (direction === 'last') {\n      nextFocus = options.length - 1;\n    }\n    this.scrollToFocusedOptionOnUpdate = true;\n    this.setState({\n      focusedOption: options[nextFocus],\n      focusedValue: null,\n    });\n  }\n  onChange = (\n    newValue: OnChangeValue<Option, IsMulti>,\n    actionMeta: ActionMeta<Option>\n  ) => {\n    const { onChange, name } = this.props;\n    actionMeta.name = name;\n\n    this.ariaOnChange(newValue, actionMeta);\n    onChange(newValue, actionMeta);\n  };\n  setValue = (\n    newValue: OnChangeValue<Option, IsMulti>,\n    action: SetValueAction,\n    option?: Option\n  ) => {\n    const { closeMenuOnSelect, isMulti } = this.props;\n    this.onInputChange('', { action: 'set-value' });\n    if (closeMenuOnSelect) {\n      this.setState({ inputIsHiddenAfterUpdate: !isMulti });\n      this.onMenuClose();\n    }\n    // when the select value should change, we should reset focusedValue\n    this.setState({ clearFocusValueOnUpdate: true });\n    this.onChange(newValue, { action, option });\n  };\n  selectOption = (newValue: Option) => {\n    const { blurInputOnSelect, isMulti, name } = this.props;\n    const { selectValue } = this.state;\n    const deselected = isMulti && this.isOptionSelected(newValue, selectValue);\n    const isDisabled = this.isOptionDisabled(newValue, selectValue);\n\n    if (deselected) {\n      const candidate = this.getOptionValue(newValue);\n      this.setValue(\n        multiValueAsValue(\n          selectValue.filter((i) => this.getOptionValue(i) !== candidate)\n        ),\n        'deselect-option',\n        newValue\n      );\n    } else if (!isDisabled) {\n      // Select option if option is not disabled\n      if (isMulti) {\n        this.setValue(\n          multiValueAsValue([...selectValue, newValue]),\n          'select-option',\n          newValue\n        );\n      } else {\n        this.setValue(singleValueAsValue(newValue), 'select-option');\n      }\n    } else {\n      this.ariaOnChange(singleValueAsValue(newValue), {\n        action: 'select-option',\n        option: newValue,\n        name,\n      });\n      return;\n    }\n\n    if (blurInputOnSelect) {\n      this.blurInput();\n    }\n  };\n  removeValue = (removedValue: Option) => {\n    const { isMulti } = this.props;\n    const { selectValue } = this.state;\n    const candidate = this.getOptionValue(removedValue);\n    const newValueArray = selectValue.filter(\n      (i) => this.getOptionValue(i) !== candidate\n    );\n    const newValue = valueTernary(\n      isMulti,\n      newValueArray,\n      newValueArray[0] || null\n    );\n\n    this.onChange(newValue, { action: 'remove-value', removedValue });\n    this.focusInput();\n  };\n  clearValue = () => {\n    const { selectValue } = this.state;\n    this.onChange(valueTernary(this.props.isMulti, [], null), {\n      action: 'clear',\n      removedValues: selectValue,\n    });\n  };\n  popValue = () => {\n    const { isMulti } = this.props;\n    const { selectValue } = this.state;\n    const lastSelectedValue = selectValue[selectValue.length - 1];\n    const newValueArray = selectValue.slice(0, selectValue.length - 1);\n    const newValue = valueTernary(\n      isMulti,\n      newValueArray,\n      newValueArray[0] || null\n    );\n\n    this.onChange(newValue, {\n      action: 'pop-value',\n      removedValue: lastSelectedValue,\n    });\n  };\n\n  // ==============================\n  // Getters\n  // ==============================\n\n  getTheme() {\n    // Use the default theme if there are no customizations.\n    if (!this.props.theme) {\n      return defaultTheme;\n    }\n    // If the theme prop is a function, assume the function\n    // knows how to merge the passed-in default theme with\n    // its own modifications.\n    if (typeof this.props.theme === 'function') {\n      return this.props.theme(defaultTheme);\n    }\n    // Otherwise, if a plain theme object was passed in,\n    // overlay it with the default theme.\n    return {\n      ...defaultTheme,\n      ...this.props.theme,\n    };\n  }\n\n  getValue = () => this.state.selectValue;\n\n  cx = (...args: any) => classNames(this.props.classNamePrefix, ...args);\n\n  getCommonProps() {\n    const {\n      clearValue,\n      cx,\n      getStyles,\n      getValue,\n      selectOption,\n      setValue,\n      props,\n    } = this;\n    const { isMulti, isRtl, options } = props;\n    const hasValue = this.hasValue();\n\n    return {\n      clearValue,\n      cx,\n      getStyles,\n      getValue,\n      hasValue,\n      isMulti,\n      isRtl,\n      options,\n      selectOption,\n      selectProps: props,\n      setValue,\n      theme: this.getTheme(),\n    };\n  }\n\n  getOptionLabel = (data: Option): string => {\n    return getOptionLabel(this.props, data);\n  };\n  getOptionValue = (data: Option): string => {\n    return getOptionValue(this.props, data);\n  };\n  getStyles = <Key extends keyof StylesProps<Option, IsMulti, Group>>(\n    key: Key,\n    props: StylesProps<Option, IsMulti, Group>[Key]\n  ) => {\n    const base = defaultStyles[key](props as any);\n    base.boxSizing = 'border-box';\n    const custom = this.props.styles[key];\n    return custom ? custom(base, props as any) : base;\n  };\n  getElementId = (\n    element:\n      | 'group'\n      | 'input'\n      | 'listbox'\n      | 'option'\n      | 'placeholder'\n      | 'live-region'\n  ) => {\n    return `${this.instancePrefix}-${element}`;\n  };\n\n  getComponents = () => {\n    return defaultComponents(this.props);\n  };\n\n  buildCategorizedOptions = () =>\n    buildCategorizedOptions(this.props, this.state.selectValue);\n  getCategorizedOptions = () =>\n    this.props.menuIsOpen ? this.buildCategorizedOptions() : [];\n  buildFocusableOptions = () =>\n    buildFocusableOptionsFromCategorizedOptions(this.buildCategorizedOptions());\n  getFocusableOptions = () =>\n    this.props.menuIsOpen ? this.buildFocusableOptions() : [];\n\n  // ==============================\n  // Helpers\n  // ==============================\n\n  ariaOnChange = (\n    value: OnChangeValue<Option, IsMulti>,\n    actionMeta: ActionMeta<Option>\n  ) => {\n    this.setState({ ariaSelection: { value, ...actionMeta } });\n  };\n\n  hasValue() {\n    const { selectValue } = this.state;\n    return selectValue.length > 0;\n  }\n  hasOptions() {\n    return !!this.getFocusableOptions().length;\n  }\n  isClearable(): boolean {\n    const { isClearable, isMulti } = this.props;\n\n    // single select, by default, IS NOT clearable\n    // multi select, by default, IS clearable\n    if (isClearable === undefined) return isMulti;\n\n    return isClearable;\n  }\n  isOptionDisabled(option: Option, selectValue: Options<Option>): boolean {\n    return isOptionDisabled(this.props, option, selectValue);\n  }\n  isOptionSelected(option: Option, selectValue: Options<Option>): boolean {\n    return isOptionSelected(this.props, option, selectValue);\n  }\n  filterOption(option: FilterOptionOption<Option>, inputValue: string) {\n    return filterOption(this.props, option, inputValue);\n  }\n  formatOptionLabel(\n    data: Option,\n    context: FormatOptionLabelContext\n  ): ReactNode {\n    if (typeof this.props.formatOptionLabel === 'function') {\n      const { inputValue } = this.props;\n      const { selectValue } = this.state;\n      return this.props.formatOptionLabel(data, {\n        context,\n        inputValue,\n        selectValue,\n      });\n    } else {\n      return this.getOptionLabel(data);\n    }\n  }\n  formatGroupLabel(data: Group) {\n    return this.props.formatGroupLabel(data);\n  }\n\n  // ==============================\n  // Mouse Handlers\n  // ==============================\n\n  onMenuMouseDown: MouseEventHandler<HTMLDivElement> = (event) => {\n    if (event.button !== 0) {\n      return;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    this.focusInput();\n  };\n  onMenuMouseMove: MouseEventHandler<HTMLDivElement> = (event) => {\n    this.blockOptionHover = false;\n  };\n  onControlMouseDown = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    const { openMenuOnClick } = this.props;\n    if (!this.state.isFocused) {\n      if (openMenuOnClick) {\n        this.openAfterFocus = true;\n      }\n      this.focusInput();\n    } else if (!this.props.menuIsOpen) {\n      if (openMenuOnClick) {\n        this.openMenu('first');\n      }\n    } else {\n      if (\n        (event.target as HTMLElement).tagName !== 'INPUT' &&\n        (event.target as HTMLElement).tagName !== 'TEXTAREA'\n      ) {\n        this.onMenuClose();\n      }\n    }\n    if (\n      (event.target as HTMLElement).tagName !== 'INPUT' &&\n      (event.target as HTMLElement).tagName !== 'TEXTAREA'\n    ) {\n      event.preventDefault();\n    }\n  };\n  onDropdownIndicatorMouseDown = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    // ignore mouse events that weren't triggered by the primary button\n    if (\n      event &&\n      event.type === 'mousedown' &&\n      (event as React.MouseEvent<HTMLDivElement>).button !== 0\n    ) {\n      return;\n    }\n    if (this.props.isDisabled) return;\n    const { isMulti, menuIsOpen } = this.props;\n    this.focusInput();\n    if (menuIsOpen) {\n      this.setState({ inputIsHiddenAfterUpdate: !isMulti });\n      this.onMenuClose();\n    } else {\n      this.openMenu('first');\n    }\n    event.preventDefault();\n    event.stopPropagation();\n  };\n  onClearIndicatorMouseDown = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    // ignore mouse events that weren't triggered by the primary button\n    if (\n      event &&\n      event.type === 'mousedown' &&\n      (event as React.MouseEvent<HTMLDivElement>).button !== 0\n    ) {\n      return;\n    }\n    this.clearValue();\n    event.preventDefault();\n    event.stopPropagation();\n    this.openAfterFocus = false;\n    if (event.type === 'touchend') {\n      this.focusInput();\n    } else {\n      setTimeout(() => this.focusInput());\n    }\n  };\n  onScroll = (event: Event) => {\n    if (typeof this.props.closeMenuOnScroll === 'boolean') {\n      if (\n        event.target instanceof HTMLElement &&\n        isDocumentElement(event.target)\n      ) {\n        this.props.onMenuClose();\n      }\n    } else if (typeof this.props.closeMenuOnScroll === 'function') {\n      if (this.props.closeMenuOnScroll(event)) {\n        this.props.onMenuClose();\n      }\n    }\n  };\n\n  // ==============================\n  // Composition Handlers\n  // ==============================\n\n  startListeningComposition() {\n    if (document && document.addEventListener) {\n      document.addEventListener(\n        'compositionstart',\n        this.onCompositionStart,\n        false\n      );\n      document.addEventListener('compositionend', this.onCompositionEnd, false);\n    }\n  }\n  stopListeningComposition() {\n    if (document && document.removeEventListener) {\n      document.removeEventListener('compositionstart', this.onCompositionStart);\n      document.removeEventListener('compositionend', this.onCompositionEnd);\n    }\n  }\n  onCompositionStart = () => {\n    this.isComposing = true;\n  };\n  onCompositionEnd = () => {\n    this.isComposing = false;\n  };\n\n  // ==============================\n  // Touch Handlers\n  // ==============================\n\n  startListeningToTouch() {\n    if (document && document.addEventListener) {\n      document.addEventListener('touchstart', this.onTouchStart, false);\n      document.addEventListener('touchmove', this.onTouchMove, false);\n      document.addEventListener('touchend', this.onTouchEnd, false);\n    }\n  }\n  stopListeningToTouch() {\n    if (document && document.removeEventListener) {\n      document.removeEventListener('touchstart', this.onTouchStart);\n      document.removeEventListener('touchmove', this.onTouchMove);\n      document.removeEventListener('touchend', this.onTouchEnd);\n    }\n  }\n  onTouchStart = ({ touches }: TouchEvent) => {\n    const touch = touches && touches.item(0);\n    if (!touch) {\n      return;\n    }\n\n    this.initialTouchX = touch.clientX;\n    this.initialTouchY = touch.clientY;\n    this.userIsDragging = false;\n  };\n  onTouchMove = ({ touches }: TouchEvent) => {\n    const touch = touches && touches.item(0);\n    if (!touch) {\n      return;\n    }\n\n    const deltaX = Math.abs(touch.clientX - this.initialTouchX);\n    const deltaY = Math.abs(touch.clientY - this.initialTouchY);\n    const moveThreshold = 5;\n\n    this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;\n  };\n  onTouchEnd = (event: TouchEvent) => {\n    if (this.userIsDragging) return;\n\n    // close the menu if the user taps outside\n    // we're checking on event.target here instead of event.currentTarget, because we want to assert information\n    // on events on child elements, not the document (which we've attached this handler to).\n    if (\n      this.controlRef &&\n      !this.controlRef.contains(event.target as Node) &&\n      this.menuListRef &&\n      !this.menuListRef.contains(event.target as Node)\n    ) {\n      this.blurInput();\n    }\n\n    // reset move vars\n    this.initialTouchX = 0;\n    this.initialTouchY = 0;\n  };\n  onControlTouchEnd: TouchEventHandler<HTMLDivElement> = (event) => {\n    if (this.userIsDragging) return;\n    this.onControlMouseDown(event);\n  };\n  onClearIndicatorTouchEnd: TouchEventHandler<HTMLDivElement> = (event) => {\n    if (this.userIsDragging) return;\n\n    this.onClearIndicatorMouseDown(event);\n  };\n  onDropdownIndicatorTouchEnd: TouchEventHandler<HTMLDivElement> = (event) => {\n    if (this.userIsDragging) return;\n\n    this.onDropdownIndicatorMouseDown(event);\n  };\n\n  // ==============================\n  // Focus Handlers\n  // ==============================\n\n  handleInputChange: FormEventHandler<HTMLInputElement> = (event) => {\n    const inputValue = event.currentTarget.value;\n    this.setState({ inputIsHiddenAfterUpdate: false });\n    this.onInputChange(inputValue, { action: 'input-change' });\n    if (!this.props.menuIsOpen) {\n      this.onMenuOpen();\n    }\n  };\n  onInputFocus: FocusEventHandler<HTMLInputElement> = (event) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n    this.setState({\n      inputIsHiddenAfterUpdate: false,\n      isFocused: true,\n    });\n    if (this.openAfterFocus || this.props.openMenuOnFocus) {\n      this.openMenu('first');\n    }\n    this.openAfterFocus = false;\n  };\n  onInputBlur: FocusEventHandler<HTMLInputElement> = (event) => {\n    if (this.menuListRef && this.menuListRef.contains(document.activeElement)) {\n      this.inputRef!.focus();\n      return;\n    }\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n    this.onInputChange('', { action: 'input-blur' });\n    this.onMenuClose();\n    this.setState({\n      focusedValue: null,\n      isFocused: false,\n    });\n  };\n  onOptionHover = (focusedOption: Option) => {\n    if (this.blockOptionHover || this.state.focusedOption === focusedOption) {\n      return;\n    }\n    this.setState({ focusedOption });\n  };\n  shouldHideSelectedOptions = () => {\n    return shouldHideSelectedOptions(this.props);\n  };\n\n  // ==============================\n  // Keyboard Handlers\n  // ==============================\n\n  onKeyDown: KeyboardEventHandler<HTMLDivElement> = (event) => {\n    const {\n      isMulti,\n      backspaceRemovesValue,\n      escapeClearsValue,\n      inputValue,\n      isClearable,\n      isDisabled,\n      menuIsOpen,\n      onKeyDown,\n      tabSelectsValue,\n      openMenuOnFocus,\n    } = this.props;\n    const { focusedOption, focusedValue, selectValue } = this.state;\n\n    if (isDisabled) return;\n\n    if (typeof onKeyDown === 'function') {\n      onKeyDown(event);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n\n    // Block option hover events when the user has just pressed a key\n    this.blockOptionHover = true;\n    switch (event.key) {\n      case 'ArrowLeft':\n        if (!isMulti || inputValue) return;\n        this.focusValue('previous');\n        break;\n      case 'ArrowRight':\n        if (!isMulti || inputValue) return;\n        this.focusValue('next');\n        break;\n      case 'Delete':\n      case 'Backspace':\n        if (inputValue) return;\n        if (focusedValue) {\n          this.removeValue(focusedValue);\n        } else {\n          if (!backspaceRemovesValue) return;\n          if (isMulti) {\n            this.popValue();\n          } else if (isClearable) {\n            this.clearValue();\n          }\n        }\n        break;\n      case 'Tab':\n        if (this.isComposing) return;\n\n        if (\n          event.shiftKey ||\n          !menuIsOpen ||\n          !tabSelectsValue ||\n          !focusedOption ||\n          // don't capture the event if the menu opens on focus and the focused\n          // option is already selected; it breaks the flow of navigation\n          (openMenuOnFocus && this.isOptionSelected(focusedOption, selectValue))\n        ) {\n          return;\n        }\n        this.selectOption(focusedOption);\n        break;\n      case 'Enter':\n        if (event.keyCode === 229) {\n          // ignore the keydown event from an Input Method Editor(IME)\n          // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n          break;\n        }\n        if (menuIsOpen) {\n          if (!focusedOption) return;\n          if (this.isComposing) return;\n          this.selectOption(focusedOption);\n          break;\n        }\n        return;\n      case 'Escape':\n        if (menuIsOpen) {\n          this.setState({ inputIsHiddenAfterUpdate: false });\n          this.onInputChange('', { action: 'menu-close' });\n          this.onMenuClose();\n        } else if (isClearable && escapeClearsValue) {\n          this.clearValue();\n        }\n        break;\n      case ' ': // space\n        if (inputValue) {\n          return;\n        }\n        if (!menuIsOpen) {\n          this.openMenu('first');\n          break;\n        }\n        if (!focusedOption) return;\n        this.selectOption(focusedOption);\n        break;\n      case 'ArrowUp':\n        if (menuIsOpen) {\n          this.focusOption('up');\n        } else {\n          this.openMenu('last');\n        }\n        break;\n      case 'ArrowDown':\n        if (menuIsOpen) {\n          this.focusOption('down');\n        } else {\n          this.openMenu('first');\n        }\n        break;\n      case 'PageUp':\n        if (!menuIsOpen) return;\n        this.focusOption('pageup');\n        break;\n      case 'PageDown':\n        if (!menuIsOpen) return;\n        this.focusOption('pagedown');\n        break;\n      case 'Home':\n        if (!menuIsOpen) return;\n        this.focusOption('first');\n        break;\n      case 'End':\n        if (!menuIsOpen) return;\n        this.focusOption('last');\n        break;\n      default:\n        return;\n    }\n    event.preventDefault();\n  };\n\n  // ==============================\n  // Renderers\n  // ==============================\n  renderInput() {\n    const {\n      isDisabled,\n      isSearchable,\n      inputId,\n      inputValue,\n      tabIndex,\n      form,\n      menuIsOpen,\n    } = this.props;\n    const { Input } = this.getComponents();\n    const { inputIsHidden, ariaSelection } = this.state;\n    const { commonProps } = this;\n\n    const id = inputId || this.getElementId('input');\n\n    // aria attributes makes the JSX \"noisy\", separated for clarity\n    const ariaAttributes = {\n      'aria-autocomplete': 'list' as const,\n      'aria-expanded': menuIsOpen,\n      'aria-haspopup': true,\n      'aria-controls': this.getElementId('listbox'),\n      'aria-owns': this.getElementId('listbox'),\n      'aria-errormessage': this.props['aria-errormessage'],\n      'aria-invalid': this.props['aria-invalid'],\n      'aria-label': this.props['aria-label'],\n      'aria-labelledby': this.props['aria-labelledby'],\n      role: 'combobox',\n      ...(!isSearchable && {\n        'aria-readonly': true,\n      }),\n      ...(this.hasValue()\n        ? ariaSelection?.action === 'initial-input-focus' && {\n            'aria-describedby': this.getElementId('live-region'),\n          }\n        : {\n            'aria-describedby': this.getElementId('placeholder'),\n          }),\n    };\n\n    if (!isSearchable) {\n      // use a dummy input to maintain focus/blur functionality\n      return (\n        <DummyInput\n          id={id}\n          innerRef={this.getInputRef}\n          onBlur={this.onInputBlur}\n          onChange={noop}\n          onFocus={this.onInputFocus}\n          disabled={isDisabled}\n          tabIndex={tabIndex}\n          inputMode=\"none\"\n          form={form}\n          value=\"\"\n          {...ariaAttributes}\n        />\n      );\n    }\n\n    return (\n      <Input\n        {...commonProps}\n        autoCapitalize=\"none\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        id={id}\n        innerRef={this.getInputRef}\n        isDisabled={isDisabled}\n        isHidden={inputIsHidden}\n        onBlur={this.onInputBlur}\n        onChange={this.handleInputChange}\n        onFocus={this.onInputFocus}\n        spellCheck=\"false\"\n        tabIndex={tabIndex}\n        form={form}\n        type=\"text\"\n        value={inputValue}\n        {...ariaAttributes}\n      />\n    );\n  }\n  renderPlaceholderOrValue() {\n    const {\n      MultiValue,\n      MultiValueContainer,\n      MultiValueLabel,\n      MultiValueRemove,\n      SingleValue,\n      Placeholder,\n    } = this.getComponents();\n    const { commonProps } = this;\n    const {\n      controlShouldRenderValue,\n      isDisabled,\n      isMulti,\n      inputValue,\n      placeholder,\n    } = this.props;\n    const { selectValue, focusedValue, isFocused } = this.state;\n\n    if (!this.hasValue() || !controlShouldRenderValue) {\n      return inputValue ? null : (\n        <Placeholder\n          {...commonProps}\n          key=\"placeholder\"\n          isDisabled={isDisabled}\n          isFocused={isFocused}\n          innerProps={{ id: this.getElementId('placeholder') }}\n        >\n          {placeholder}\n        </Placeholder>\n      );\n    }\n\n    if (isMulti) {\n      return selectValue.map((opt, index) => {\n        const isOptionFocused = opt === focusedValue;\n\n        return (\n          <MultiValue\n            {...commonProps}\n            components={{\n              Container: MultiValueContainer,\n              Label: MultiValueLabel,\n              Remove: MultiValueRemove,\n            }}\n            isFocused={isOptionFocused}\n            isDisabled={isDisabled}\n            key={`${this.getOptionValue(opt)}${index}`}\n            index={index}\n            removeProps={{\n              onClick: () => this.removeValue(opt),\n              onTouchEnd: () => this.removeValue(opt),\n              onMouseDown: (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              },\n            }}\n            data={opt}\n          >\n            {this.formatOptionLabel(opt, 'value')}\n          </MultiValue>\n        );\n      });\n    }\n\n    if (inputValue) {\n      return null;\n    }\n\n    const singleValue = selectValue[0];\n    return (\n      <SingleValue {...commonProps} data={singleValue} isDisabled={isDisabled}>\n        {this.formatOptionLabel(singleValue, 'value')}\n      </SingleValue>\n    );\n  }\n  renderClearIndicator() {\n    const { ClearIndicator } = this.getComponents();\n    const { commonProps } = this;\n    const { isDisabled, isLoading } = this.props;\n    const { isFocused } = this.state;\n\n    if (\n      !this.isClearable() ||\n      !ClearIndicator ||\n      isDisabled ||\n      !this.hasValue() ||\n      isLoading\n    ) {\n      return null;\n    }\n\n    const innerProps = {\n      onMouseDown: this.onClearIndicatorMouseDown,\n      onTouchEnd: this.onClearIndicatorTouchEnd,\n      'aria-hidden': 'true',\n    };\n\n    return (\n      <ClearIndicator\n        {...commonProps}\n        innerProps={innerProps}\n        isFocused={isFocused}\n      />\n    );\n  }\n  renderLoadingIndicator() {\n    const { LoadingIndicator } = this.getComponents();\n    const { commonProps } = this;\n    const { isDisabled, isLoading } = this.props;\n    const { isFocused } = this.state;\n\n    if (!LoadingIndicator || !isLoading) return null;\n\n    const innerProps = { 'aria-hidden': 'true' };\n    return (\n      <LoadingIndicator\n        {...commonProps}\n        innerProps={innerProps}\n        isDisabled={isDisabled}\n        isFocused={isFocused}\n      />\n    );\n  }\n  renderIndicatorSeparator() {\n    const { DropdownIndicator, IndicatorSeparator } = this.getComponents();\n\n    // separator doesn't make sense without the dropdown indicator\n    if (!DropdownIndicator || !IndicatorSeparator) return null;\n\n    const { commonProps } = this;\n    const { isDisabled } = this.props;\n    const { isFocused } = this.state;\n\n    return (\n      <IndicatorSeparator\n        {...commonProps}\n        isDisabled={isDisabled}\n        isFocused={isFocused}\n      />\n    );\n  }\n  renderDropdownIndicator() {\n    const { DropdownIndicator } = this.getComponents();\n    if (!DropdownIndicator) return null;\n    const { commonProps } = this;\n    const { isDisabled } = this.props;\n    const { isFocused } = this.state;\n\n    const innerProps = {\n      onMouseDown: this.onDropdownIndicatorMouseDown,\n      onTouchEnd: this.onDropdownIndicatorTouchEnd,\n      'aria-hidden': 'true',\n    };\n\n    return (\n      <DropdownIndicator\n        {...commonProps}\n        innerProps={innerProps}\n        isDisabled={isDisabled}\n        isFocused={isFocused}\n      />\n    );\n  }\n  renderMenu() {\n    const {\n      Group,\n      GroupHeading,\n      Menu,\n      MenuList,\n      MenuPortal,\n      LoadingMessage,\n      NoOptionsMessage,\n      Option,\n    } = this.getComponents();\n    const { commonProps } = this;\n    const { focusedOption } = this.state;\n    const {\n      captureMenuScroll,\n      inputValue,\n      isLoading,\n      loadingMessage,\n      minMenuHeight,\n      maxMenuHeight,\n      menuIsOpen,\n      menuPlacement,\n      menuPosition,\n      menuPortalTarget,\n      menuShouldBlockScroll,\n      menuShouldScrollIntoView,\n      noOptionsMessage,\n      onMenuScrollToTop,\n      onMenuScrollToBottom,\n    } = this.props;\n\n    if (!menuIsOpen) return null;\n\n    // TODO: Internal Option Type here\n    const render = (props: CategorizedOption<Option>, id: string) => {\n      const { type, data, isDisabled, isSelected, label, value } = props;\n      const isFocused = focusedOption === data;\n      const onHover = isDisabled ? undefined : () => this.onOptionHover(data);\n      const onSelect = isDisabled ? undefined : () => this.selectOption(data);\n      const optionId = `${this.getElementId('option')}-${id}`;\n      const innerProps = {\n        id: optionId,\n        onClick: onSelect,\n        onMouseMove: onHover,\n        onMouseOver: onHover,\n        tabIndex: -1,\n      };\n\n      return (\n        <Option\n          {...commonProps}\n          innerProps={innerProps}\n          data={data}\n          isDisabled={isDisabled}\n          isSelected={isSelected}\n          key={optionId}\n          label={label}\n          type={type}\n          value={value}\n          isFocused={isFocused}\n          innerRef={isFocused ? this.getFocusedOptionRef : undefined}\n        >\n          {this.formatOptionLabel(props.data, 'menu')}\n        </Option>\n      );\n    };\n\n    let menuUI: ReactNode;\n\n    if (this.hasOptions()) {\n      menuUI = this.getCategorizedOptions().map((item) => {\n        if (item.type === 'group') {\n          const { data, options, index: groupIndex } = item;\n          const groupId = `${this.getElementId('group')}-${groupIndex}`;\n          const headingId = `${groupId}-heading`;\n\n          return (\n            <Group\n              {...commonProps}\n              key={groupId}\n              data={data}\n              options={options}\n              Heading={GroupHeading}\n              headingProps={{\n                id: headingId,\n                data: item.data,\n              }}\n              label={this.formatGroupLabel(item.data)}\n            >\n              {item.options.map((option) =>\n                render(option, `${groupIndex}-${option.index}`)\n              )}\n            </Group>\n          );\n        } else if (item.type === 'option') {\n          return render(item, `${item.index}`);\n        }\n      });\n    } else if (isLoading) {\n      const message = loadingMessage({ inputValue });\n      if (message === null) return null;\n      menuUI = <LoadingMessage {...commonProps}>{message}</LoadingMessage>;\n    } else {\n      const message = noOptionsMessage({ inputValue });\n      if (message === null) return null;\n      menuUI = <NoOptionsMessage {...commonProps}>{message}</NoOptionsMessage>;\n    }\n    const menuPlacementProps = {\n      minMenuHeight,\n      maxMenuHeight,\n      menuPlacement,\n      menuPosition,\n      menuShouldScrollIntoView,\n    };\n\n    const menuElement = (\n      <MenuPlacer {...commonProps} {...menuPlacementProps}>\n        {({ ref, placerProps: { placement, maxHeight } }) => (\n          <Menu\n            {...commonProps}\n            {...menuPlacementProps}\n            innerRef={ref}\n            innerProps={{\n              onMouseDown: this.onMenuMouseDown,\n              onMouseMove: this.onMenuMouseMove,\n              id: this.getElementId('listbox'),\n            }}\n            isLoading={isLoading}\n            placement={placement}\n          >\n            <ScrollManager\n              captureEnabled={captureMenuScroll}\n              onTopArrive={onMenuScrollToTop}\n              onBottomArrive={onMenuScrollToBottom}\n              lockEnabled={menuShouldBlockScroll}\n            >\n              {(scrollTargetRef) => (\n                <MenuList\n                  {...commonProps}\n                  innerRef={(instance) => {\n                    this.getMenuListRef(instance);\n                    scrollTargetRef(instance);\n                  }}\n                  isLoading={isLoading}\n                  maxHeight={maxHeight}\n                  focusedOption={focusedOption}\n                >\n                  {menuUI}\n                </MenuList>\n              )}\n            </ScrollManager>\n          </Menu>\n        )}\n      </MenuPlacer>\n    );\n\n    // positioning behaviour is almost identical for portalled and fixed,\n    // so we use the same component. the actual portalling logic is forked\n    // within the component based on `menuPosition`\n    return menuPortalTarget || menuPosition === 'fixed' ? (\n      <MenuPortal\n        {...commonProps}\n        appendTo={menuPortalTarget}\n        controlElement={this.controlRef}\n        menuPlacement={menuPlacement}\n        menuPosition={menuPosition}\n      >\n        {menuElement}\n      </MenuPortal>\n    ) : (\n      menuElement\n    );\n  }\n  renderFormField() {\n    const { delimiter, isDisabled, isMulti, name } = this.props;\n    const { selectValue } = this.state;\n\n    if (!name || isDisabled) return;\n\n    if (isMulti) {\n      if (delimiter) {\n        const value = selectValue\n          .map((opt) => this.getOptionValue(opt))\n          .join(delimiter);\n        return <input name={name} type=\"hidden\" value={value} />;\n      } else {\n        const input =\n          selectValue.length > 0 ? (\n            selectValue.map((opt, i) => (\n              <input\n                key={`i-${i}`}\n                name={name}\n                type=\"hidden\"\n                value={this.getOptionValue(opt)}\n              />\n            ))\n          ) : (\n            <input name={name} type=\"hidden\" />\n          );\n\n        return <div>{input}</div>;\n      }\n    } else {\n      const value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';\n      return <input name={name} type=\"hidden\" value={value} />;\n    }\n  }\n\n  renderLiveRegion() {\n    const { commonProps } = this;\n    const {\n      ariaSelection,\n      focusedOption,\n      focusedValue,\n      isFocused,\n      selectValue,\n    } = this.state;\n\n    const focusableOptions = this.getFocusableOptions();\n\n    return (\n      <LiveRegion\n        {...commonProps}\n        id={this.getElementId('live-region')}\n        ariaSelection={ariaSelection}\n        focusedOption={focusedOption}\n        focusedValue={focusedValue}\n        isFocused={isFocused}\n        selectValue={selectValue}\n        focusableOptions={focusableOptions}\n      />\n    );\n  }\n\n  render() {\n    const { Control, IndicatorsContainer, SelectContainer, ValueContainer } =\n      this.getComponents();\n\n    const { className, id, isDisabled, menuIsOpen } = this.props;\n    const { isFocused } = this.state;\n    const commonProps = (this.commonProps = this.getCommonProps());\n\n    return (\n      <SelectContainer\n        {...commonProps}\n        className={className}\n        innerProps={{\n          id: id,\n          onKeyDown: this.onKeyDown,\n        }}\n        isDisabled={isDisabled}\n        isFocused={isFocused}\n      >\n        {this.renderLiveRegion()}\n        <Control\n          {...commonProps}\n          innerRef={this.getControlRef}\n          innerProps={{\n            onMouseDown: this.onControlMouseDown,\n            onTouchEnd: this.onControlTouchEnd,\n          }}\n          isDisabled={isDisabled}\n          isFocused={isFocused}\n          menuIsOpen={menuIsOpen}\n        >\n          <ValueContainer {...commonProps} isDisabled={isDisabled}>\n            {this.renderPlaceholderOrValue()}\n            {this.renderInput()}\n          </ValueContainer>\n          <IndicatorsContainer {...commonProps} isDisabled={isDisabled}>\n            {this.renderClearIndicator()}\n            {this.renderLoadingIndicator()}\n            {this.renderIndicatorSeparator()}\n            {this.renderDropdownIndicator()}\n          </IndicatorsContainer>\n        </Control>\n        {this.renderMenu()}\n        {this.renderFormField()}\n      </SelectContainer>\n    );\n  }\n}\n\nexport type PublicBaseSelectProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> = JSX.LibraryManagedAttributes<typeof Select, Props<Option, IsMulti, Group>>;\n","import React, { MutableRefObject, ReactElement, RefAttributes } from 'react';\n\nimport { GroupBase, OptionBase } from './types';\nimport Select from './Select';\nimport useStateManager from './useStateManager';\nimport type { StateManagerProps } from './useStateManager';\nexport type { StateManagerProps };\n\ntype StateManagedSelect = <\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = false,\n  Group extends GroupBase<Option> = GroupBase<Option>\n>(\n  props: StateManagerProps<Option, IsMulti, Group> &\n    RefAttributes<Select<Option, IsMulti, Group>>\n) => ReactElement;\n\nconst StateManagedSelect = React.forwardRef(\n  <\n    Option extends OptionBase,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  >(\n    props: StateManagerProps<Option, IsMulti, Group>,\n    ref:\n      | ((instance: Select<Option, IsMulti, Group> | null) => void)\n      | MutableRefObject<Select<Option, IsMulti, Group> | null>\n      | null\n  ) => {\n    const baseSelectProps = useStateManager(props);\n\n    return <Select ref={ref} {...baseSelectProps} />;\n  }\n) as StateManagedSelect;\n\nexport default StateManagedSelect;\n","import {\n  ActionMeta,\n  GroupBase,\n  InputActionMeta,\n  OnChangeValue,\n  OptionBase,\n  PropsValue,\n} from './types';\nimport { PublicBaseSelectProps } from './Select';\nimport { useCallback, useState, useMemo } from 'react';\n\ntype StateManagedPropKeys =\n  | 'inputValue'\n  | 'menuIsOpen'\n  | 'onChange'\n  | 'onInputChange'\n  | 'onMenuClose'\n  | 'onMenuOpen'\n  | 'value';\n\ntype SelectPropsWithOptionalStateManagedProps<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>\n> = Omit<PublicBaseSelectProps<Option, IsMulti, Group>, StateManagedPropKeys> &\n  Partial<PublicBaseSelectProps<Option, IsMulti, Group>>;\n\nexport interface StateManagerAdditionalProps<Option extends OptionBase> {\n  defaultInputValue?: string;\n  defaultMenuIsOpen?: boolean;\n  defaultValue?: PropsValue<Option>;\n}\n\nexport type StateManagerProps<\n  Option extends OptionBase = OptionBase,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> = SelectPropsWithOptionalStateManagedProps<Option, IsMulti, Group> &\n  StateManagerAdditionalProps<Option>;\n\nexport default function useStateManager<\n  Option extends OptionBase,\n  IsMulti extends boolean,\n  Group extends GroupBase<Option>,\n  AdditionalProps\n>({\n  defaultInputValue = '',\n  defaultMenuIsOpen = false,\n  defaultValue = null,\n  inputValue: propsInputValue,\n  menuIsOpen: propsMenuIsOpen,\n  onChange: propsOnChange,\n  onInputChange: propsOnInputChange,\n  onMenuClose: propsOnMenuClose,\n  onMenuOpen: propsOnMenuOpen,\n  value: propsValue,\n  ...restSelectProps\n}: StateManagerProps<Option, IsMulti, Group> &\n  AdditionalProps): PublicBaseSelectProps<Option, IsMulti, Group> &\n  Omit<\n    AdditionalProps,\n    keyof StateManagerAdditionalProps<Option> | StateManagedPropKeys\n  > {\n  const stateInputValue = useMemo(\n    () => propsInputValue !== undefined ? propsInputValue : defaultInputValue,\n    [propsInputValue, defaultInputValue]\n  );\n  const [stateMenuIsOpen, setStateMenuIsOpen] = useState(\n    propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen\n  );\n  const stateValue = useMemo(\n    () => propsValue !== undefined ? propsValue : defaultValue,\n    [propsValue, defaultValue]\n  );\n\n  const onChange = useCallback(\n    (value: OnChangeValue<Option, IsMulti>, actionMeta: ActionMeta<Option>) => {\n      if (typeof propsOnChange === 'function') {\n        propsOnChange(value, actionMeta);\n      }\n    },\n    [propsOnChange]\n  );\n  const onInputChange = useCallback(\n    (value: string, actionMeta: InputActionMeta) => {\n      let newValue;\n      if (typeof propsOnInputChange === 'function') {\n        newValue = propsOnInputChange(value, actionMeta);\n      }\n    },\n    [propsOnInputChange]\n  );\n  const onMenuOpen = useCallback(() => {\n    if (typeof propsOnMenuOpen === 'function') {\n      propsOnMenuOpen();\n    }\n    setStateMenuIsOpen(true);\n  }, [propsOnMenuOpen]);\n  const onMenuClose = useCallback(() => {\n    if (typeof propsOnMenuClose === 'function') {\n      propsOnMenuClose();\n    }\n    setStateMenuIsOpen(false);\n  }, [propsOnMenuClose]);\n\n  const inputValue =\n    propsInputValue !== undefined ? propsInputValue : stateInputValue;\n  const menuIsOpen =\n    propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;\n  const value = propsValue !== undefined ? propsValue : stateValue;\n\n  return {\n    ...restSelectProps,\n    inputValue,\n    menuIsOpen,\n    onChange,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen,\n    value,\n  };\n}\n","import React, { Component, ReactNode } from 'react';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport memoizeOne from 'memoize-one';\n\ninterface NonceProviderProps {\n  nonce: string;\n  children: ReactNode;\n  cacheKey: string;\n}\n\nexport default class NonceProvider extends Component<NonceProviderProps> {\n  constructor(props: NonceProviderProps) {\n    super(props);\n    this.createEmotionCache = memoizeOne(this.createEmotionCache);\n  }\n  createEmotionCache = (nonce: string, key: string) => {\n    return createCache({ nonce, key });\n  };\n  render() {\n    const emotionCache = this.createEmotionCache(\n      this.props.nonce,\n      this.props.cacheKey\n    );\n    return (\n      <CacheProvider value={emotionCache}>{this.props.children}</CacheProvider>\n    );\n  }\n}\n"],"names":["noop","applyPrefixToName","prefix","name","classNames","state","className","arr","key","hasOwnProperty","push","filter","i","map","String","trim","join","cleanValue","value","Array","isArray","Boolean","cleanCommonProps","props","isDocumentElement","el","document","documentElement","body","window","indexOf","getScrollTop","pageYOffset","scrollTop","scrollTo","top","animatedScrollTo","element","to","duration","callback","start","change","currentTime","animateScroll","t","val","requestAnimationFrame","isTouchCapable","createEvent","e","isMobileDevice","test","navigator","userAgent","passiveOptionAccessed","w","addEventListener","removeEventListener","supportsPassiveEvents","notNullish","item","valueTernary","isMulti","multiValue","singleValue","getMenuPlacement","maxHeight","menuEl","minHeight","placement","shouldScroll","isFixedPosition","spacing","theme","scrollParent","style","getComputedStyle","excludeStaticParent","position","overflowRx","parent","parentElement","overflow","overflowY","overflowX","getScrollParent","defaultState","offsetParent","scrollHeight","getBoundingClientRect","height","menuBottom","bottom","menuHeight","menuTop","containerTop","viewHeight","innerHeight","marginBottom","parseInt","marginTop","viewSpaceAbove","viewSpaceBelow","scrollSpaceAbove","scrollSpaceBelow","scrollDown","scrollUp","constrainedHeight","spaceAbove","Math","min","controlHeight","Error","coercePlacement","p","PortalPlacementContext","createContext","getPortalPlacement","MenuPlacer","_this","maxMenuHeight","ref","menuPosition","minMenuHeight","menuPlacement","menuShouldScrollIntoView","context","setState","render","children","this","getPlacement","placerProps","getUpdatedProps","Component","noticeCSS","baseUnit","color","colors","neutral40","padding","textAlign","noOptionsMessageCSS","loadingMessageCSS","NoOptionsMessage","cx","innerProps","jsx","css","getStyles","defaultProps","LoadingMessage","MenuPortal","_this2","appendTo","controlElement","isFixed","rect","left","right","width","getBoundingClientObj","scrollDistance","menuWrapper","offset","Provider","createPortal","A11yText","label","zIndex","border","clip","whiteSpace","defaultAriaLiveMessages","guidance","isSearchable","isDisabled","tabSelectsValue","onChange","labels","action","length","onFocus","focused","options","selectValue","isSelected","getArrayIndex","onFilter","inputValue","resultsMessage","LiveRegion","ariaSelection","focusedOption","focusedValue","focusableOptions","isFocused","selectProps","id","ariaLiveMessages","getOptionLabel","isOptionDisabled","menuIsOpen","screenReaderStatus","ariaLabel","ariaLive","messages","useMemo","ariaSelected","message","selectedOptions","removedValues","selected","removedValue","option","multiSelected","undefined","onChangeProps","ariaContext","focusMsg","includes","onFocusProps","resultsMsg","count","guidanceMsg","ScreenReaderText","React","Fragment","isInitialFocus","diacritics","base","letters","anyDiacritic","RegExp","d","diacriticToBase","diacritic","j","stripDiacritics","str","replace","match","memoizedStripDiacriticsForInput","memoizeOne","trimString","defaultStringify","createFilter","config","rawInput","data","__isNew__","ignoreCase","ignoreAccents","stringify","matchFrom","input","candidate","toLowerCase","substr","DummyInput","innerRef","background","caretColor","fontSize","outline","opacity","transform","STYLE_KEYS","LOCK_STYLES","boxSizing","preventTouchMove","preventDefault","allowTouchMove","stopPropagation","preventInertiaScroll","totalScroll","currentScroll","offsetHeight","isTouchDevice","maxTouchPoints","canUseDOM","createElement","activeScrollLocks","listenerOptions","capture","passive","blurSelectInput","activeElement","blur","ScrollManager","lockEnabled","captureEnabled","setScrollCaptureTarget","isEnabled","onBottomArrive","onBottomLeave","onTopArrive","onTopLeave","isBottom","useRef","isTop","touchStart","scrollTarget","handleEventDelta","useCallback","event","delta","current","target","isDeltaPositive","availableScroll","clientHeight","shouldCancelScroll","cancelScroll","onWheel","deltaY","onTouchStart","changedTouches","clientY","onTouchMove","startListening","notPassive","stopListening","useEffect","useScrollCapture","setScrollLockTarget","accountForScrollbars","originalStyles","addScrollLock","touchScrollTarget","targetStyle","forEach","currentPadding","paddingRight","clientWidth","adjustedPadding","innerWidth","Object","keys","removeScrollLock","max","useScrollLock","onClick","Svg","size","viewBox","focusable","display","fill","lineHeight","stroke","strokeWidth","CrossIcon","DownChevron","baseCSS","neutral60","neutral20","transition","neutral80","dropdownIndicatorCSS","clearIndicatorCSS","loadingDotAnimations","keyframes","LoadingDot","animation","delay","backgroundColor","borderRadius","marginLeft","verticalAlign","LoadingIndicator","isRtl","indicator","spacingStyle","gridArea","font","minWidth","margin","containerStyle","flex","gridTemplateColumns","content","visibility","inputStyle","isHidden","MultiValueGeneric","components","ClearIndicator","Control","control","DropdownIndicator","Group","Heading","headingProps","group","GroupHeading","IndicatorsContainer","indicators","IndicatorSeparator","Input","inputClassName","disabled","Menu","menu","MenuList","MultiValue","removeProps","Container","Label","Remove","ClassNames","emotionCx","MultiValueContainer","MultiValueLabel","MultiValueRemove","role","Option","Placeholder","placeholder","SelectContainer","SingleValue","ValueContainer","hasValue","defaultStyles","clearIndicator","container","direction","pointerEvents","alignItems","neutral5","neutral0","borderColor","neutral10","primary","borderStyle","borderWidth","boxShadow","cursor","flexWrap","justifyContent","neutral30","dropdownIndicator","paddingBottom","paddingTop","groupHeading","fontWeight","paddingLeft","textTransform","indicatorsContainer","alignSelf","flexShrink","indicatorSeparator","loadingIndicator","marginRight","loadingMessage","menuGutter","menuList","WebkitOverflowScrolling","menuPortal","multiValueLabel","cropWithEllipsis","textOverflow","multiValueRemove","dangerLight","danger","noOptionsMessage","primary25","userSelect","WebkitTapHighlightColor","primary50","neutral50","maxWidth","valueContainer","defaultTheme","primary75","neutral70","neutral90","backspaceRemovesValue","blurInputOnSelect","captureMenuScroll","closeMenuOnSelect","closeMenuOnScroll","controlShouldRenderValue","escapeClearsValue","filterOption","formatGroupLabel","getOptionValue","isLoading","menuShouldBlockScroll","openMenuOnFocus","openMenuOnClick","pageSize","styles","tabIndex","toCategorizedOption","index","type","isOptionSelected","buildCategorizedOptions","groupOrOption","groupOrOptionIndex","categorizedOptions","optionIndex","categorizedOption","isFocusable","buildFocusableOptionsFromCategorizedOptions","reduce","optionsAccumulator","shouldHideSelectedOptions","some","hideSelectedOptions","instanceId","Select","inputIsHidden","clearFocusValueOnUpdate","prevWasFocused","inputIsHiddenAfterUpdate","prevProps","controlRef","focusedOptionRef","menuListRef","inputRef","focusInput","blurInput","newValue","actionMeta","ariaOnChange","onInputChange","onMenuClose","deselected","setValue","newValueArray","lastSelectedValue","slice","args","classNamePrefix","custom","instancePrefix","defaultComponents","buildFocusableOptions","button","blockOptionHover","tagName","openMenu","openAfterFocus","clearValue","setTimeout","HTMLElement","isComposing","touches","touch","initialTouchX","clientX","initialTouchY","userIsDragging","deltaX","abs","contains","onControlMouseDown","onClearIndicatorMouseDown","onDropdownIndicatorMouseDown","currentTarget","onMenuOpen","focus","onBlur","isClearable","onKeyDown","defaultPrevented","focusValue","removeValue","popValue","shiftKey","selectOption","keyCode","focusOption","getDerivedStateFromProps","newMenuOptionsState","nextSelectValue","lastFocusedIndex","getNextFocusedValue","lastFocusedOption","getNextFocusedOption","newInputIsHiddenState","newAriaSelection","hasKeptFocus","componentDidMount","startListeningComposition","startListeningToTouch","onScroll","autoFocus","componentDidUpdate","focusedEl","menuRect","focusedRect","overScroll","scrollToFocusedOptionOnUpdate","offsetTop","componentWillUnmount","stopListeningComposition","stopListeningToTouch","openAtIndex","selectedIndex","focusedIndex","lastIndex","nextFocus","getFocusableOptions","getTheme","getCommonProps","getValue","hasOptions","formatOptionLabel","onCompositionStart","onCompositionEnd","onTouchEnd","renderInput","inputId","form","getComponents","commonProps","getElementId","ariaAttributes","autoCapitalize","autoComplete","autoCorrect","getInputRef","onInputBlur","handleInputChange","onInputFocus","spellCheck","inputMode","renderPlaceholderOrValue","opt","_this3","onMouseDown","renderClearIndicator","onClearIndicatorTouchEnd","renderLoadingIndicator","renderIndicatorSeparator","renderDropdownIndicator","onDropdownIndicatorTouchEnd","renderMenu","menuPortalTarget","onMenuScrollToTop","onMenuScrollToBottom","menuUI","onHover","_this4","onOptionHover","onSelect","optionId","onMouseMove","onMouseOver","getFocusedOptionRef","getCategorizedOptions","groupIndex","groupId","menuPlacementProps","menuElement","onMenuMouseDown","onMenuMouseMove","scrollTargetRef","instance","getMenuListRef","renderFormField","delimiter","_this5","renderLiveRegion","getControlRef","onControlTouchEnd","StateManagedSelect","forwardRef","defaultInputValue","defaultMenuIsOpen","defaultValue","propsInputValue","propsMenuIsOpen","propsOnChange","propsOnInputChange","propsOnMenuClose","propsOnMenuOpen","propsValue","restSelectProps","stateInputValue","stateMenuIsOpen","setStateMenuIsOpen","stateValue","baseSelectProps","useState","nonce","createCache","createEmotionCache","emotionCache","cacheKey","CacheProvider","source","keyAsString","rsCss"],"mappings":"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"}